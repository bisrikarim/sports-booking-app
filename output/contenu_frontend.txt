===== EXTRACTION DES FICHIERS FRONTEND =====
===== frontend/src/styles/globals.css =====



===== frontend/src/services/auth.js =====
import api from './api';

export const login = async (email, password) => {
  try {
    console.log('Tentative de connexion avec:', { email });
    
    const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001/api'}/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ email, password })
    });

    // Log du statut de la réponse
    console.log('Statut de la réponse:', response.status);

    // Log du contenu brut de la réponse
    const responseText = await response.text();
    console.log('Contenu brut de la réponse:', responseText);

    // Parsing manuel du JSON
    let data;
    try {
      data = JSON.parse(responseText);
    } catch (parseError) {
      console.error('Erreur de parsing JSON:', parseError);
      return { 
        success: false, 
        error: 'Réponse invalide du serveur' 
      };
    }

    console.log('Données parsées:', data);
    
    if (data.token) {
      localStorage.setItem('token', data.token);
      window.dispatchEvent(new Event('auth-change'));
      return { success: true };
    }
    
    return { 
      success: false, 
      error: data.error || 'Authentification échouée' 
    };
  } catch (error) {
    console.error('Erreur login:', error);
    return { 
      success: false, 
      error: error.message || 'Erreur lors de la connexion' 
    };
  }
};

export const register = async (userData) => {
  try {
    const response = await api.post('/users', userData);
    return { success: true };
  } catch (error) {
    return { 
      success: false, 
      error: error.response?.data?.error || 'Erreur lors de l\'inscription' 
    };
  }
};

export const logout = () => {
  if (typeof window !== 'undefined') {
    localStorage.removeItem('token');
    // Déclencher un événement pour informer l'application du changement
    window.dispatchEvent(new Event('auth-change'));
  }
};

export const isAuthenticated = () => {
  if (typeof window === 'undefined') {
    return false;
  }
  return !!localStorage.getItem('token');
};

export const isAdmin = () => {
  if (typeof window === 'undefined') return false;
  
  try {
    const token = localStorage.getItem('token');
    if (!token) return false;
    
    const payload = JSON.parse(atob(token.split('.')[1]));
    return payload.role === 'admin';
  } catch (error) {
    console.error('Erreur lors de la vérification du rôle:', error);
    return false;
  }
};


===== frontend/src/services/fields.js =====
// src/services/fields.js
import api from './api';

export const getAllFields = async () => {
  try {
    console.log('Tentative de récupération des terrains...');
    
    // Utiliser fetch directement pour déboguer
    const response = await fetch('http://localhost:3001/api/fields');
    console.log('Status de la réponse:', response.status);
    
    const data = await response.json();
    console.log('Données reçues:', data);
    
    return data; // Retourner directement les données
  } catch (error) {
    console.error('Erreur détaillée lors de la récupération des terrains:', error);
    throw error;
  }
};

export const getFieldById = async (id) => {
  try {
    console.log('Tentative de récupération du terrain:', id);
    
    // Utiliser fetch directement pour déboguer
    const response = await fetch(`http://localhost:3001/api/fields/${id}`);
    console.log('Status de la réponse:', response.status);
    
    if (!response.ok) {
      throw new Error(`Erreur HTTP: ${response.status}`);
    }
    
    const data = await response.json();
    console.log('Données reçues:', data);
    
    return data;
  } catch (error) {
    console.error('Erreur détaillée:', error);
    throw error;
  }
};

export const getFieldsByType = async (sportType) => {
  try {
    const response = await api.get(`/fields?sportType=${sportType}`);
    return response.data;
  } catch (error) {
    console.error(`Erreur lors de la récupération des terrains de type ${sportType}:`, error);
    throw error;
  }
};

export const createField = async (fieldData) => {
  try {
      const response = await api.post('/fields', fieldData, {
          headers: { 'Content-Type': 'multipart/form-data' }
      });
      return response;
  } catch (error) {
      console.error('Erreur lors de la création:', error);
      throw error;
  }
};

export const updateField = async (fieldId, fieldData) => {
  try {
    console.log('Tentative de modification du terrain:', fieldId);
    console.log('Nouvelles données:', fieldData);
    const response = await api.put(`/fields/${fieldId}`, fieldData);
    return response;
  } catch (error) {
    console.error('Erreur lors de la modification du terrain:', error);
    throw error;
  }
};

export const deleteField = async (fieldId) => {
  try {
    console.log('Tentative de suppression du terrain:', fieldId);
    const response = await api.delete(`/fields/${fieldId}`);
    return response;
  } catch (error) {
    console.error('Erreur lors de la suppression du terrain:', error);
    throw error;
  }
};


===== frontend/src/services/bookings.js =====
// src/services/bookings.js
import api from './api';

export const createBooking = async (bookingData) => {
  try {
    console.log('createBooking - Données envoyées:', bookingData);
    // Utiliser le service API pour envoyer la requête
    const response = await api.post('/bookings', bookingData);
    console.log('createBooking - Réponse:', response);
    return response;
  } catch (error) {
    console.error('createBooking - Erreur:', error);
    throw error;
  }
};

export const getUserBookings = async () => {
  try {
    const response = await api.get('/bookings/user');
    return response;
  } catch (error) {
    console.error('Erreur lors de la récupération des réservations:', error);
    throw error;
  }
};

// Récupérer toutes les réservations (admin)
export const getAllBookings = async (filters = {}) => {
  try {
    let url = '/bookings';
    
    // Ajouter des filtres à l'URL si nécessaire
    const queryParams = new URLSearchParams();
    
    if (filters.status) queryParams.append('status', filters.status);
    if (filters.from) queryParams.append('from', filters.from);
    if (filters.to) queryParams.append('to', filters.to);
    if (filters.field) queryParams.append('field', filters.field);
    
    const queryString = queryParams.toString();
    if (queryString) {
      url += `?${queryString}`;
    }
    
    console.log('URL de requête:', url); // Log pour déboguer
    const response = await api.get(url);
    
    // S'assurer que nous retournons les données, pas l'objet de réponse complet
    return response.data || response;
  } catch (error) {
    console.error('Erreur lors de la récupération des réservations:', error);
    throw error;
  }
};

// Mettre à jour le statut d'une réservation
export const updateBookingStatus = async (bookingId, status) => {
  try {
    const response = await api.put(`/bookings/${bookingId}`, { status });
    return response;
  } catch (error) {
    console.error("Erreur lors de la mise à jour du statut:", error);
    throw error;
  }
};

// Annuler une réservation
export const cancelBooking = async (bookingId) => {
  try {
    const response = await api.put(`/bookings/${bookingId}/cancel`);
    return response;
  } catch (error) {
    // Propager l'erreur avec le message d'erreur du serveur si disponible
    const errorMessage = error.response?.data?.error || "Erreur lors de l'annulation";
    error.message = errorMessage;
    throw error;
  }
};

// Confirmer une réservation
export const confirmBooking = async (bookingId) => {
  try {
    const response = await api.put(`/bookings/${bookingId}/confirm`);
    return response;
  } catch (error) {
    console.error("Erreur lors de la confirmation:", error);
    throw error;
  }
};

// Récupérer les détails d'une réservation
export const getBookingById = async (bookingId) => {
  try {
    const response = await api.get(`/bookings/${bookingId}`);
    return response;
  } catch (error) {
    console.error("Erreur lors de la récupération des détails:", error);
    throw error;
  }
};


===== frontend/src/services/api.js =====
import axios from 'axios';

const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001/api';

const api = axios.create({
  baseURL: API_URL
});

// Intercepteur pour ajouter le token à chaque requête
api.interceptors.request.use(
  (config) => {
    // Ajoutons un log pour vérifier si le token est récupéré
    const token = localStorage.getItem('token');
    if (token) {
      console.log('Ajout du token à la requête:', token.substring(0, 15) + '...');
      config.headers.Authorization = `Bearer ${token}`;
    } else {
      console.warn('Aucun token trouvé dans localStorage');
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// Méthodes d'API pour faciliter les appels
const get = async (url, config = {}) => {
  try {
    const response = await api.get(url, config);
    return response.data;
  } catch (error) {
    console.error(`Erreur GET ${url}:`, error.response?.data || error.message);
    throw error;
  }
};

const post = async (url, data = {}, config = {}) => {
  try {
    console.log(`POST ${url} - Données:`, data);
    const response = await api.post(url, data, config);
    return response.data;
  } catch (error) {
    console.error(`Erreur POST ${url}:`, error.response?.data || error.message);
    throw error;
  }
};

const put = async (url, data = {}, config = {}) => {
  try {
    const response = await api.put(url, data, config);
    return response.data;
  } catch (error) {
    console.error(`Erreur PUT ${url}:`, error.response?.data || error.message);
    throw error;
  }
};

const del = async (url, config = {}) => {
  try {
    const response = await api.delete(url, config);
    return response.data;
  } catch (error) {
    console.error(`Erreur DELETE ${url}:`, error.response?.data || error.message);
    throw error;
  }
};

export default {
  get,
  post,
  put,
  delete: del
};


===== frontend/src/app/page.module.css =====
.page {
  --gray-rgb: 0, 0, 0;
  --gray-alpha-200: rgba(var(--gray-rgb), 0.08);
  --gray-alpha-100: rgba(var(--gray-rgb), 0.05);

  --button-primary-hover: #383838;
  --button-secondary-hover: #f2f2f2;

  display: grid;
  grid-template-rows: 20px 1fr 20px;
  align-items: center;
  justify-items: center;
  min-height: 100svh;
  padding: 80px;
  gap: 64px;
  font-family: var(--font-geist-sans);
}

@media (prefers-color-scheme: dark) {
  .page {
    --gray-rgb: 255, 255, 255;
    --gray-alpha-200: rgba(var(--gray-rgb), 0.145);
    --gray-alpha-100: rgba(var(--gray-rgb), 0.06);

    --button-primary-hover: #ccc;
    --button-secondary-hover: #1a1a1a;
  }
}

.main {
  display: flex;
  flex-direction: column;
  gap: 32px;
  grid-row-start: 2;
}

.main ol {
  font-family: var(--font-geist-mono);
  padding-left: 0;
  margin: 0;
  font-size: 14px;
  line-height: 24px;
  letter-spacing: -0.01em;
  list-style-position: inside;
}

.main li:not(:last-of-type) {
  margin-bottom: 8px;
}

.main code {
  font-family: inherit;
  background: var(--gray-alpha-100);
  padding: 2px 4px;
  border-radius: 4px;
  font-weight: 600;
}

.ctas {
  display: flex;
  gap: 16px;
}

.ctas a {
  appearance: none;
  border-radius: 128px;
  height: 48px;
  padding: 0 20px;
  border: none;
  border: 1px solid transparent;
  transition:
    background 0.2s,
    color 0.2s,
    border-color 0.2s;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 16px;
  line-height: 20px;
  font-weight: 500;
}

a.primary {
  background: var(--foreground);
  color: var(--background);
  gap: 8px;
}

a.secondary {
  border-color: var(--gray-alpha-200);
  min-width: 158px;
}

.footer {
  grid-row-start: 3;
  display: flex;
  gap: 24px;
}

.footer a {
  display: flex;
  align-items: center;
  gap: 8px;
}

.footer img {
  flex-shrink: 0;
}

/* Enable hover only on non-touch devices */
@media (hover: hover) and (pointer: fine) {
  a.primary:hover {
    background: var(--button-primary-hover);
    border-color: transparent;
  }

  a.secondary:hover {
    background: var(--button-secondary-hover);
    border-color: transparent;
  }

  .footer a:hover {
    text-decoration: underline;
    text-underline-offset: 4px;
  }
}

@media (max-width: 600px) {
  .page {
    padding: 32px;
    padding-bottom: 80px;
  }

  .main {
    align-items: center;
  }

  .main ol {
    text-align: center;
  }

  .ctas {
    flex-direction: column;
  }

  .ctas a {
    font-size: 14px;
    height: 40px;
    padding: 0 16px;
  }

  a.secondary {
    min-width: auto;
  }

  .footer {
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;
  }
}

@media (prefers-color-scheme: dark) {
  .logo {
    filter: invert();
  }
}



===== frontend/src/app/dashboard/layout.js =====
// src/app/dashboard/layout.js
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { isAuthenticated } from '@/services/auth';

export default function DashboardLayout({ children }) {
  const router = useRouter();
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Protection de la route - rediriger vers login si non authentifié
    if (!isAuthenticated()) {
      router.push('/login');
      return;
    }
    setLoading(false);
  }, [router]);

  if (loading) {
    return <div className="min-h-screen flex justify-center items-center">Chargement...</div>;
  }

  return children;
}


===== frontend/src/app/dashboard/bookings/page.js =====
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { getUserBookings, cancelBooking } from '@/services/bookings';
import { isAuthenticated } from '@/services/auth';
import Link from 'next/link';

export default function UserBookingsPage() {
  const router = useRouter();
  const [bookings, setBookings] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [processing, setProcessing] = useState(false);

  useEffect(() => {
    // Vérifier si l'utilisateur est connecté
    if (!isAuthenticated()) {
      router.push('/login');
      return;
    }

    const fetchUserBookings = async () => {
      try {
        setLoading(true);
        const data = await getUserBookings();
        setBookings(Array.isArray(data) ? data : []);
      } catch (err) {
        console.error('Erreur lors du chargement des réservations:', err);
        setError('Impossible de charger vos réservations');
      } finally {
        setLoading(false);
      }
    };

    fetchUserBookings();
  }, [router]);

  const handleCancelBooking = async (bookingId) => {
    if (!window.confirm('Êtes-vous sûr de vouloir annuler cette réservation?')) {
      return;
    }
    
    try {
      setProcessing(true);
      const response = await cancelBooking(bookingId);
      
      // Mettre à jour la liste des réservations
      const updatedBookings = bookings.map(booking => 
        booking._id === bookingId ? { ...booking, status: 'cancelled' } : booking
      );
      
      setBookings(updatedBookings);
      alert('Réservation annulée avec succès');
    } catch (err) {
      console.error('Erreur lors de l\'annulation:', err);
      
      // Afficher le message d'erreur spécifique du serveur si disponible
      const errorMessage = err.response?.data?.error || "Erreur lors de l'annulation de la réservation";
      alert(errorMessage);
    } finally {
      setProcessing(false);
    }
  };

  // Formater la date
  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('fr-FR', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  // Obtenir le nom du terrain
  const getFieldName = (field) => {
    if (!field) return 'Terrain inconnu';
    return field.name || 'Terrain inconnu';
  };

  // État de chargement
  if (loading) {
    return <div className="p-6 text-center">Chargement de vos réservations...</div>;
  }

  // Affichage des erreurs
  if (error) {
    return (
      <div className="p-6 text-center">
        <div className="bg-red-100 text-red-700 p-4 rounded mb-4">
          {error}
        </div>
        <button
          onClick={() => window.location.reload()}
          className="bg-blue-500 text-white px-4 py-2 rounded"
        >
          Réessayer
        </button>
      </div>
    );
  }

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-6">Mes réservations</h1>
      
      {bookings.length === 0 ? (
        <div className="bg-white p-6 rounded shadow text-center">
          <p className="text-gray-600 mb-4">Vous n'avez pas encore de réservations.</p>
          <Link href="/fields" className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
            Réserver un terrain
          </Link>
        </div>
      ) : (
        <div className="bg-white rounded shadow overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Terrain</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Créneau</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Statut</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {bookings.map((booking) => (
                <tr key={booking._id}>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {getFieldName(booking.field)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {formatDate(booking.date)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {booking.timeSlot}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                      ${booking.status === 'confirmed' ? 'bg-green-100 text-green-800' : 
                        booking.status === 'cancelled' ? 'bg-red-100 text-red-800' : 
                        'bg-yellow-100 text-yellow-800'}`}
                    >
                      {booking.status === 'confirmed' ? 'Confirmé' : 
                       booking.status === 'cancelled' ? 'Annulé' : 
                       'En attente'}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                    {(booking.status === 'pending' || booking.status === 'confirmed') && (
                      <button
                        onClick={() => handleCancelBooking(booking._id)}
                        disabled={processing}
                        className="text-red-600 hover:text-red-900"
                      >
                        Annuler
                      </button>
                    )}
                    {booking.status === 'cancelled' && (
                      <span className="text-gray-400">Annulée</span>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
}


===== frontend/src/app/dashboard/page.js =====
// src/app/dashboard/page.js
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { isAuthenticated, isAdmin } from '@/services/auth';
import { getUserBookings } from '@/services/bookings';
import { getAllFields } from '@/services/fields';
import Link from 'next/link';

export default function Dashboard() {
  const router = useRouter();
  const [loading, setLoading] = useState(true);
  const [userName, setUserName] = useState('');
  const [isAdminUser, setIsAdminUser] = useState(false);
  const [upcomingBookings, setUpcomingBookings] = useState([]);
  const [popularFields, setPopularFields] = useState([]);

  useEffect(() => {
    // Vérifier si l'utilisateur est connecté
    if (!isAuthenticated()) {
      router.push('/login');
      return;
    }

    const fetchData = async () => {
      try {
        setLoading(true);
        
        // Récupérer le nom d'utilisateur depuis le token
        const token = localStorage.getItem('token');
        if (token) {
          const payload = JSON.parse(atob(token.split('.')[1]));
          setUserName(payload.name || 'Utilisateur');
        }
        
        // Vérifier si l'utilisateur est un administrateur
        setIsAdminUser(isAdmin());
        
        // Récupérer les réservations de l'utilisateur
        const bookingsResponse = await getUserBookings();
        const bookings = Array.isArray(bookingsResponse) 
          ? bookingsResponse 
          : (bookingsResponse.data || []);
        
        // Filtrer les réservations à venir
        const today = new Date();
        const upcoming = bookings
          .filter(booking => new Date(booking.date) >= today)
          .sort((a, b) => new Date(a.date) - new Date(b.date))
          .slice(0, 3); // Prendre les 3 prochaines réservations
        
        setUpcomingBookings(upcoming);
        
        // Récupérer quelques terrains pour affichage
        const fieldsData = await getAllFields();
        const fields = Array.isArray(fieldsData) ? fieldsData : [];
        setPopularFields(fields.slice(0, 3));
      } catch (err) {
        console.error('Erreur lors du chargement des données:', err);
      } finally {
        setLoading(false);
      }
    };
    
    fetchData();
  }, [router]);

  // Formater la date
  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('fr-FR', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex justify-center items-center">
        <div className="w-16 h-16 border-4 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
      </div>
    );
  }

  // Tableau de bord Administrateur
  if (isAdminUser) {
    return (
      <div className="min-h-screen bg-gray-50">
        {/* En-tête du tableau de bord admin */}
        <div className="bg-gradient-to-r from-purple-600 to-purple-800 text-white py-8 px-6">
          <div className="max-w-6xl mx-auto">
            <h1 className="text-3xl font-bold mb-2">Tableau de bord administrateur</h1>
            <p className="opacity-90">Gérez les terrains, les réservations et les utilisateurs</p>
          </div>
        </div>
        
        {/* Contenu administrateur */}
        <div className="max-w-6xl mx-auto px-4 py-8">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <Link href="/admin/bookings" className="bg-white rounded-xl shadow-sm p-6 border border-gray-100 hover:shadow-md transition-shadow">
              <h3 className="text-xl font-bold mb-2 text-purple-600">Gestion des réservations</h3>
              <p className="text-gray-600 mb-4">Voir et gérer toutes les réservations des utilisateurs</p>
              <div className="text-purple-600">Accéder →</div>
            </Link>
            
            <Link href="/admin/fields" className="bg-white rounded-xl shadow-sm p-6 border border-gray-100 hover:shadow-md transition-shadow">
              <h3 className="text-xl font-bold mb-2 text-green-600">Gestion des terrains</h3>
              <p className="text-gray-600 mb-4">Ajouter, modifier ou supprimer des terrains</p>
              <div className="text-green-600">Accéder →</div>
            </Link>
            
            <Link href="/admin/users" className="bg-white rounded-xl shadow-sm p-6 border border-gray-100 hover:shadow-md transition-shadow">
              <h3 className="text-xl font-bold mb-2 text-blue-600">Gestion des utilisateurs</h3>
              <p className="text-gray-600 mb-4">Gérer les comptes utilisateurs et leurs accès</p>
              <div className="text-blue-600">Accéder →</div>
            </Link>
          </div>
          
          {/* Statistiques et résumé */}
          <div className="bg-white rounded-xl shadow-sm p-6 border border-gray-100 mb-8">
            <h2 className="text-xl font-bold text-gray-800 mb-4">Statistiques du système</h2>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="bg-purple-50 p-4 rounded-lg">
                <p className="text-sm text-gray-500">Réservations totales</p>
                <p className="text-2xl font-bold text-purple-700">{upcomingBookings.length}</p>
              </div>
              <div className="bg-green-50 p-4 rounded-lg">
                <p className="text-sm text-gray-500">Terrains actifs</p>
                <p className="text-2xl font-bold text-green-700">{popularFields.length}</p>
              </div>
              <div className="bg-blue-50 p-4 rounded-lg">
                <p className="text-sm text-gray-500">Réservations aujourd'hui</p>
                <p className="text-2xl font-bold text-blue-700">0</p>
              </div>
              <div className="bg-orange-50 p-4 rounded-lg">
                <p className="text-sm text-gray-500">Utilisateurs actifs</p>
                <p className="text-2xl font-bold text-orange-700">1</p>
              </div>
            </div>
          </div>
          
          {/* Actions avancées */}
          <div className="bg-white rounded-xl shadow-sm p-6 border border-gray-100">
            <h2 className="text-xl font-bold text-gray-800 mb-4">Actions avancées</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <button className="p-4 bg-gray-100 rounded-lg text-left hover:bg-gray-200 transition-colors">
                <h3 className="font-medium">Exporter les données</h3>
                <p className="text-sm text-gray-500">Télécharger les statistiques en CSV</p>
              </button>
              <button className="p-4 bg-gray-100 rounded-lg text-left hover:bg-gray-200 transition-colors">
                <h3 className="font-medium">Maintenance du système</h3>
                <p className="text-sm text-gray-500">Vérifier l'état du système</p>
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Tableau de bord Utilisateur standard
  return (
    <div className="min-h-screen bg-gray-50">
      {/* En-tête du tableau de bord */}
      <div className="bg-gradient-to-r from-blue-600 to-blue-800 text-white py-8 px-6">
        <div className="max-w-6xl mx-auto">
          <h1 className="text-3xl font-bold mb-2">Bienvenue, {userName}</h1>
          <p className="opacity-90">Gérez vos réservations et trouvez de nouveaux terrains</p>
        </div>
      </div>
      
      {/* Cartes de statistiques */}
      <div className="max-w-6xl mx-auto px-4 py-8">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          {/* Statistique 1 */}
          <div className="bg-white rounded-xl shadow-sm p-6 border border-gray-100 flex items-center">
            <div className="bg-blue-100 rounded-full p-4 mr-4">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
              </svg>
            </div>
            <div>
              <p className="text-sm text-gray-500">Réservations actives</p>
              <p className="text-2xl font-bold">{upcomingBookings.length}</p>
            </div>
          </div>
          
          {/* Statistique 2 */}
          <div className="bg-white rounded-xl shadow-sm p-6 border border-gray-100 flex items-center">
            <div className="bg-green-100 rounded-full p-4 mr-4">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
            </div>
            <div>
              <p className="text-sm text-gray-500">Prochaine réservation</p>
              <p className="text-xl font-bold">
                {upcomingBookings.length > 0 
                  ? formatDate(upcomingBookings[0].date)
                  : "Aucune"}
              </p>
            </div>
          </div>
          
          {/* Statistique 3 */}
          <div className="bg-white rounded-xl shadow-sm p-6 border border-gray-100 flex items-center">
            <div className="bg-purple-100 rounded-full p-4 mr-4">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-purple-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
              </svg>
            </div>
            <div>
              <p className="text-sm text-gray-500">Sports préférés</p>
              <p className="text-xl font-bold">Football</p>
            </div>
          </div>
        </div>
        
        {/* Sections principales */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Prochaines réservations */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden">
              <div className="px-6 py-5 border-b border-gray-100 flex justify-between items-center">
                <h2 className="text-xl font-bold text-gray-800">Prochaines réservations</h2>
                <Link href="/dashboard/bookings" className="text-blue-600 hover:text-blue-800 text-sm font-medium flex items-center">
                  Voir tout
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                  </svg>
                </Link>
              </div>
              <div className="divide-y divide-gray-100">
                {upcomingBookings.length === 0 ? (
                  <div className="py-8 px-6 text-center">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 text-gray-300 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                    <p className="text-gray-500 mb-4">Vous n'avez pas encore de réservations à venir</p>
                    <Link href="/fields" className="inline-flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700">
                      Réserver un terrain
                    </Link>
                  </div>
                ) : (
                  upcomingBookings.map((booking, index) => (
                    <div key={index} className="py-4 px-6 flex items-center">
                      <div className="bg-blue-100 rounded-md p-3 mr-4">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2z" />
                        </svg>
                      </div>
                      <div className="flex-grow">
                        <p className="font-medium text-gray-800">{booking.field?.name || 'Terrain'}</p>
                        <div className="flex space-x-4 text-sm mt-1">
                          <p className="text-gray-500">{formatDate(booking.date)}</p>
                          <p className="text-gray-500">{booking.timeSlot}</p>
                        </div>
                      </div>
                      <span className={`px-3 py-1 text-xs rounded-full ${
                        booking.status === 'confirmed' 
                          ? 'bg-green-100 text-green-800' 
                          : booking.status === 'cancelled' 
                            ? 'bg-red-100 text-red-800' 
                            : 'bg-yellow-100 text-yellow-800'
                      }`}>
                        {booking.status === 'confirmed' ? 'Confirmé' : 
                        booking.status === 'cancelled' ? 'Annulé' : 'En attente'}
                      </span>
                    </div>
                  ))
                )}
              </div>
            </div>
          </div>
          
          {/* Terrains recommandés */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden h-full">
              <div className="px-6 py-5 border-b border-gray-100">
                <h2 className="text-xl font-bold text-gray-800">Terrains recommandés</h2>
              </div>
              <div className="p-6 space-y-4">
                {popularFields.length === 0 ? (
                  <div className="text-center py-4">
                    <p className="text-gray-500">Aucun terrain disponible</p>
                  </div>
                ) : (
                  popularFields.map((field, index) => (
                    <Link href={`/fields/${field._id}`} key={index}>
                      <div className="group flex items-center p-3 rounded-lg hover:bg-gray-50 transition-colors cursor-pointer">
                        <div className="w-16 h-16 rounded-md bg-gray-200 flex-shrink-0 flex items-center justify-center overflow-hidden mr-4">
                          {field.sportType === 'football' && (
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14 10l-2 1m0 0l-2-1m2 1v2.5M20 7l-2 1m2-1l-2-1m2 1v2.5M14 4l-2-1-2 1M4 7l2-1M4 7l2 1M4 7v2.5M12 21l-2-1m2 1l2-1m-2 1v-2.5M6 18l-2-1v-2.5M18 18l2-1v-2.5" />
                            </svg>
                          )}
                          {field.sportType === 'basketball' && (
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <circle cx="12" cy="12" r="10" strokeWidth="2" />
                              <path d="M4.93 4.93 19.07 19.07M12 2v20M22 12H2" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" />
                            </svg>
                          )}
                          {(field.sportType === 'tennis' || field.sportType === 'padel') && (
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                              <circle cx="12" cy="12" r="10" strokeWidth="2" />
                              <path d="M12 2v20M2 12h20" strokeLinecap="round" strokeWidth="2" />
                            </svg>
                          )}
                        </div>
                        <div>
                          <h3 className="font-medium text-gray-800 group-hover:text-blue-600 transition-colors">{field.name}</h3>
                          <p className="text-sm text-gray-500">{field.location}</p>
                          <p className="text-sm font-medium text-blue-600 mt-1">{field.pricePerHour}€/h</p>
                        </div>
                      </div>
                    </Link>
                  ))
                )}
                
                <div className="pt-2">
                  <Link href="/fields" className="block w-full py-2 px-4 bg-gray-100 hover:bg-gray-200 text-center rounded-md text-gray-800 text-sm font-medium transition-colors">
                    Explorer tous les terrains
                  </Link>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        {/* Actions rapides */}
        <div className="mt-8">
          <h2 className="text-xl font-bold text-gray-800 mb-4">Actions rapides</h2>
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
            <Link href="/fields" className="group block">
              <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6 flex flex-col items-center text-center h-full hover:shadow-md transition-shadow">
                <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mb-4">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                  </svg>
                </div>
                <h3 className="text-lg font-medium text-gray-800 group-hover:text-blue-600 transition-colors">Nouvelle réservation</h3>
                <p className="text-sm text-gray-500 mt-2">Réservez un nouveau terrain sportif</p>
              </div>
            </Link>
            <Link href="/dashboard/bookings" className="group block">
              <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6 flex flex-col items-center text-center h-full hover:shadow-md transition-shadow">
                <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-4">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                  </svg>
                </div>
                <h3 className="text-lg font-medium text-gray-800 group-hover:text-green-600 transition-colors">Mes réservations</h3>
                <p className="text-sm text-gray-500 mt-2">Consultez et gérez vos réservations</p>
              </div>
            </Link>
            <div className="group block">
              <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6 flex flex-col items-center text-center h-full hover:shadow-md transition-shadow">
                <div className="w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mb-4">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-purple-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                  </svg>
                </div>
                <h3 className="text-lg font-medium text-gray-800 group-hover:text-purple-600 transition-colors">Profil</h3>
                <p className="text-sm text-gray-500 mt-2">Modifiez vos informations personnelles</p>
              </div>
            </div>
            <div className="group block">
              <div className="bg-white rounded-xl shadow-sm border border-gray-100 p-6 flex flex-col items-center text-center h-full hover:shadow-md transition-shadow">
                <div className="w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mb-4">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-orange-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
                <h3 className="text-lg font-medium text-gray-800 group-hover:text-orange-600 transition-colors">Aide</h3>
                <p className="text-sm text-gray-500 mt-2">Consultez notre centre d'aide et de support</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}


===== frontend/src/app/layout.js =====
import './globals.css';
import Layout from '@/components/layout/Layout';

export const metadata = {
  title: 'SportReserve - Réservation de terrains sportifs',
  description: 'Plateforme de réservation de terrains sportifs en ligne',
};

export default function RootLayout({ children }) {
  return (
    <html lang="fr">
      <body>
        <Layout>{children}</Layout>
      </body>
    </html>
  );
}


===== frontend/src/app/login/page.js =====
// frontend/src/app/login/page.js
import LoginForm from '@/components/auth/LoginForm';

export default function LoginPage() {
  return (
    <div className="min-h-screen flex flex-col justify-center items-center bg-[#fafafa] px-4">
      <div className="w-full max-w-md">
        <div className="mb-8 text-center">
          <h1 className="text-4xl font-bold mb-2 text-black">SportReserve</h1>
          <p className="text-gray-600">Connectez-vous à votre compte</p>
        </div>
        <LoginForm />
      </div>
    </div>
  );
}


===== frontend/src/app/bookings/new/page.js =====
'use client';

import { useState, useEffect, Suspense } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { getFieldById } from '@/services/fields';
import { isAuthenticated } from '@/services/auth';

function NewBookingContent() {
  const router = useRouter();
  const searchParams = useSearchParams();
  
  const fieldId = searchParams.get('field');
  const date = searchParams.get('date');
  const timeSlot = searchParams.get('timeSlot');
  
  const [field, setField] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [confirmingBooking, setConfirmingBooking] = useState(false);

  useEffect(() => {
    // Vérifier si l'utilisateur est connecté
    if (!isAuthenticated()) {
      router.push('/login');
      return;
    }
    
    // Vérifier si tous les paramètres nécessaires sont présents
    if (!fieldId || !date || !timeSlot) {
      setError('Informations de réservation incomplètes');
      setLoading(false);
      return;
    }

    const fetchFieldData = async () => {
      try {
        const data = await getFieldById(fieldId);
        console.log("Données du terrain récupérées:", data);
        setField(data);
      } catch (err) {
        console.error("Erreur lors de la récupération du terrain:", err);
        
        // Données simulées en cas d'erreur
        const fallbackField = {
          _id: fieldId,
          name: "Terrain " + fieldId.substring(0, 5),
          location: "Stade Municipal",
          sportType: "football",
          pricePerHour: 50
        };
        
        console.log("Utilisation de données simulées:", fallbackField);
        setField(fallbackField);
        setError('Données simulées - Impossible de se connecter à l\'API');
      } finally {
        setLoading(false);
      }
    };

    fetchFieldData();
  }, [fieldId, date, timeSlot, router]);

  const handleConfirmBooking = async () => {
    try {
      setConfirmingBooking(true);
      
      // Formatage de la date pour s'assurer qu'elle est au format YYYY-MM-DD
      const formattedDate = date ? new Date(date).toISOString().split('T')[0] : date;
      
      const bookingData = {
        field: fieldId,
        date: formattedDate,
        timeSlot: timeSlot
      };
      
      console.log('Tentative de réservation avec:', bookingData);
      
      // Utiliser fetch directement pour plus de contrôle
      const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001/api';
      const token = localStorage.getItem('token');
      
      console.log('URL de l\'API:', API_URL);
      console.log('Token disponible:', !!token);
      if (token) {
        console.log('Début du token:', token.substring(0, 20) + '...');
      }
      
      if (!token) {
        throw new Error('Vous devez être connecté pour effectuer une réservation');
      }
      
      console.log('Envoi de la requête...');
      const response = await fetch(`${API_URL}/bookings`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(bookingData)
      });
      
      console.log('Statut de la réponse:', response.status);
      console.log('Headers de la réponse:', Object.fromEntries([...response.headers]));
      
      const data = await response.json();
      console.log('Données de la réponse:', data);
      
      if (!response.ok) {
        console.log('Erreur détectée, analyse...');
        console.log('Données brutes de la réponse:', data);
        console.log('Details si disponibles:', data.details);
        
        let errorMessage = 'Erreur lors de la réservation';
        
        if (data.details && Array.isArray(data.details)) {
          // Format spécifique pour express-validator
          errorMessage = data.details.map(d => `${d.path}: ${d.msg}`).join(', ');
        } else if (data.error) {
          errorMessage = data.error;
        } else if (data.message) {
          errorMessage = data.message;
        }
        
        throw new Error(errorMessage);
      }
      
      alert('Réservation confirmée avec succès!');
      router.push('/dashboard');
    } catch (err) {
      console.error('Erreur détaillée:', err);
      
      // Essayer de récupérer tous les détails possibles
      let errorMessage = err.message || 'Problème lors de la réservation';
      
      // Vérifier si nous avons plus de détails
      if (err.response) {
        try {
          const errorData = await err.response.json();
          errorMessage += ': ' + (errorData.error || errorData.message || JSON.stringify(errorData));
        } catch (parseErr) {
          console.error('Impossible de parser la réponse d\'erreur:', parseErr);
        }
      }
      
      setError(errorMessage);
      alert('Erreur: ' + errorMessage);
      setConfirmingBooking(false);
    }
  };

  const formatDate = (dateString) => {
    try {
      const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
      return new Date(dateString).toLocaleDateString('fr-FR', options);
    } catch (err) {
      console.error('Erreur lors du formatage de la date:', err);
      return dateString; // Retourner la date brute en cas d'erreur
    }
  };

  // Fonction test pour debug
  const testBooking = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        alert('Pas de token trouvé. Veuillez vous connecter.');
        return;
      }
      
      const testData = {
        field: fieldId,
        date: "2025-03-20",
        timeSlot: "14:00-15:00"
      };
      
      console.log('Test de réservation avec:', testData);
      console.log('Token utilisé:', token.substring(0, 20) + '...');
      
      const API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001/api';
      const response = await fetch(`${API_URL}/bookings`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(testData)
      });
      
      console.log('Statut du test:', response.status);
      const data = await response.json();
      console.log('Réponse du test:', data);
      
      alert('Test réussi! Voir console pour détails.');
    } catch (err) {
      console.error('Erreur test:', err);
      alert('Erreur test: ' + err.message);
    }
  };

  if (loading) {
    return (
      <div style={{ padding: '20px', textAlign: 'center' }}>
        Préparation de votre réservation...
      </div>
    );
  }

  if (error && !field) {
    return (
      <div style={{ padding: '20px' }}>
        <div style={{ 
          backgroundColor: '#FEF2F2', 
          color: '#B91C1C', 
          padding: '10px', 
          borderRadius: '4px',
          marginBottom: '20px'
        }}>
          {error || "Impossible de charger les détails de la réservation"}
        </div>
        <button
          onClick={() => router.back()}
          style={{
            backgroundColor: '#2563eb',
            color: 'white',
            padding: '8px 16px',
            borderRadius: '4px',
            border: 'none',
            cursor: 'pointer'
          }}
        >
          Retour
        </button>
      </div>
    );
  }

  return (
    <div style={{ padding: '20px', maxWidth: '800px', margin: '0 auto' }}>
      {error && (
        <div style={{ 
          backgroundColor: '#FEF2F2', 
          color: '#B91C1C', 
          padding: '10px', 
          borderRadius: '4px',
          marginBottom: '20px'
        }}>
          {error}
        </div>
      )}
      
      <div style={{ 
        backgroundColor: 'white', 
        padding: '20px', 
        borderRadius: '8px',
        marginBottom: '20px'
      }}>
        <h1 style={{ fontSize: '24px', fontWeight: 'bold', marginBottom: '20px' }}>
          Confirmer votre réservation
        </h1>
        
        <div style={{ 
          borderBottom: '1px solid #e5e7eb', 
          paddingBottom: '20px', 
          marginBottom: '20px'
        }}>
          <h2 style={{ fontSize: '18px', fontWeight: 'bold', marginBottom: '12px' }}>
            Résumé de la réservation
          </h2>
          
          <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '10px' }}>
            <div style={{ fontWeight: 'bold' }}>Terrain:</div>
            <div>{field.name}</div>
            
            <div style={{ fontWeight: 'bold' }}>Type de sport:</div>
            <div>{field.sportType}</div>
            
            <div style={{ fontWeight: 'bold' }}>Date:</div>
            <div>{formatDate(date)}</div>
            
            <div style={{ fontWeight: 'bold' }}>Créneau horaire:</div>
            <div>{timeSlot}</div>
            
            <div style={{ fontWeight: 'bold' }}>Prix:</div>
            <div>{field.pricePerHour}€</div>
          </div>
        </div>
        
        <div style={{ display: 'flex', justifyContent: 'space-between', flexWrap: 'wrap', gap: '10px' }}>
          <button
            onClick={() => router.back()}
            style={{
              padding: '8px 16px',
              backgroundColor: '#f3f4f6',
              color: '#4b5563',
              border: 'none',
              borderRadius: '4px',
              cursor: 'pointer'
            }}
          >
            Annuler
          </button>
          
          <button
            onClick={testBooking}
            style={{
              padding: '8px 16px',
              backgroundColor: '#9333ea',
              color: 'white',
              border: 'none',
              borderRadius: '4px',
              cursor: 'pointer'
            }}
          >
            Test Réservation
          </button>
          
          <button
            onClick={handleConfirmBooking}
            disabled={confirmingBooking}
            style={{
              padding: '8px 16px',
              backgroundColor: '#2563eb',
              color: 'white',
              border: 'none',
              borderRadius: '4px',
              cursor: confirmingBooking ? 'not-allowed' : 'pointer'
            }}
          >
            {confirmingBooking ? 'Confirmation en cours...' : 'Confirmer la réservation'}
          </button>
        </div>
      </div>
    </div>
  );
}

export default function NewBookingPage() {
  return (
    <Suspense fallback={<div style={{ padding: '20px', textAlign: 'center' }}>Chargement...</div>}>
      <NewBookingContent />
    </Suspense>
  );
}


===== frontend/src/app/page.js =====
// src/app/page.js
import Link from 'next/link';

export default function Home() {
  return (
    <div className="min-h-screen bg-white">
      {/* Hero Section */}
      <section className="relative bg-gradient-to-r from-blue-600 to-blue-800 text-white">
        <div className="absolute inset-0 opacity-20 bg-pattern"></div>
        <div className="relative max-w-6xl mx-auto px-4 py-20 sm:py-32 sm:px-6 lg:px-8 flex flex-col items-center text-center">
          <h1 className="text-4xl sm:text-5xl md:text-6xl font-bold mb-6">
            Réservez votre terrain sportif en quelques clics
          </h1>
          <p className="text-xl max-w-2xl mb-10 text-blue-100">
            Découvrez la façon la plus simple de trouver et réserver des terrains de sport près de chez vous
          </p>
          <div className="flex flex-col sm:flex-row gap-4">
            <Link href="/fields" className="px-8 py-4 bg-white text-blue-700 rounded-lg font-medium hover:bg-blue-50 transition-colors shadow-lg">
              Voir les terrains disponibles
            </Link>
            <Link href="/register" className="px-8 py-4 bg-transparent border-2 border-white text-white rounded-lg font-medium hover:bg-white/10 transition-colors">
              Créer un compte
            </Link>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="py-16 bg-gray-50">
        <div className="max-w-6xl mx-auto px-4 sm:px-6">
          <div className="text-center mb-16">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">Comment ça fonctionne</h2>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto">
              SportReserve simplifie la réservation de terrains sportifs en trois étapes simples
            </p>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-10">
            {/* Étape 1 */}
            <div className="bg-white p-8 rounded-xl shadow-sm border border-gray-100 flex flex-col items-center text-center">
              <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mb-6">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </div>
              <h3 className="text-xl font-bold text-gray-900 mb-2">Trouvez</h3>
              <p className="text-gray-600">
                Parcourez notre catalogue de terrains et filtrez selon vos préférences sportives
              </p>
            </div>
            
            {/* Étape 2 */}
            <div className="bg-white p-8 rounded-xl shadow-sm border border-gray-100 flex flex-col items-center text-center">
              <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mb-6">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
              </div>
              <h3 className="text-xl font-bold text-gray-900 mb-2">Réservez</h3>
              <p className="text-gray-600">
                Sélectionnez une date et un créneau horaire disponible qui vous convient
              </p>
            </div>
            
            {/* Étape 3 */}
            <div className="bg-white p-8 rounded-xl shadow-sm border border-gray-100 flex flex-col items-center text-center">
              <div className="w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mb-6">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-purple-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <h3 className="text-xl font-bold text-gray-900 mb-2">Jouez</h3>
              <p className="text-gray-600">
                Profitez de votre activité sportive sans tracas administratifs
              </p>
            </div>
          </div>
        </div>
      </section>
      
      {/* Sports Categories */}
      <section className="py-16">
        <div className="max-w-6xl mx-auto px-4 sm:px-6">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">Nos types de terrains</h2>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto">
              Une grande variété de terrains pour tous vos sports préférés
            </p>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {/* Football */}
            <Link href="/fields?type=football" className="group block">
              <div className="relative h-60 rounded-xl overflow-hidden shadow-md">
                <div className="absolute inset-0 bg-gradient-to-t from-gray-900 to-transparent opacity-80 z-10"></div>
                <img 
                  src="/images/football-field.jpg" 
                  alt="Terrain de football" 
                  className="absolute inset-0 w-full h-full object-cover group-hover:scale-105 transition-transform duration-300 ease-in-out"
                />
                <div className="absolute bottom-0 left-0 p-6 z-20">
                  <span className="inline-block px-3 py-1 bg-green-100 text-green-800 rounded-full text-xs font-medium mb-2">Populaire</span>
                  <h3 className="text-white text-xl font-bold">Football</h3>
                </div>
              </div>
            </Link>
            
            {/* Basketball */}
            <Link href="/fields?type=basketball" className="group block">
              <div className="relative h-60 rounded-xl overflow-hidden shadow-md">
                <div className="absolute inset-0 bg-gradient-to-t from-gray-900 to-transparent opacity-80 z-10"></div>
                <img 
                  src="/images/basketball-court.jpeg" 
                  alt="Terrain de basketball" 
                  className="absolute inset-0 w-full h-full object-cover group-hover:scale-105 transition-transform duration-300 ease-in-out"
                />
                <div className="absolute bottom-0 left-0 p-6 z-20">
                  <h3 className="text-white text-xl font-bold">Basketball</h3>
                </div>
              </div>
            </Link>
            
            {/* Tennis */}
            <Link href="/fields?type=tennis" className="group block">
              <div className="relative h-60 rounded-xl overflow-hidden shadow-md">
                <div className="absolute inset-0 bg-gradient-to-t from-gray-900 to-transparent opacity-80 z-10"></div>
                <img 
                  src="/images/tennis-court.jpg" 
                  alt="Court de tennis" 
                  className="absolute inset-0 w-full h-full object-cover group-hover:scale-105 transition-transform duration-300 ease-in-out"
                />
                <div className="absolute bottom-0 left-0 p-6 z-20">
                  <h3 className="text-white text-xl font-bold">Tennis</h3>
                </div>
              </div>
            </Link>
            
            {/* Padel */}
            <Link href="/fields?type=padel" className="group block">
              <div className="relative h-60 rounded-xl overflow-hidden shadow-md">
                <div className="absolute inset-0 bg-gradient-to-t from-gray-900 to-transparent opacity-80 z-10"></div>
                <img 
                  src="/images/padel-court.jpg" 
                  alt="Court de padel" 
                  className="absolute inset-0 w-full h-full object-cover group-hover:scale-105 transition-transform duration-300 ease-in-out"
                />
                <div className="absolute bottom-0 left-0 p-6 z-20">
                  <span className="inline-block px-3 py-1 bg-purple-100 text-purple-800 rounded-full text-xs font-medium mb-2">Nouveau</span>
                  <h3 className="text-white text-xl font-bold">Padel</h3>
                </div>
              </div>
            </Link>
          </div>
        </div>
      </section>
      
      {/* Testimonials */}
      <section className="py-16 bg-gray-50">
        <div className="max-w-6xl mx-auto px-4 sm:px-6">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">Ce que disent nos utilisateurs</h2>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto">
              Découvrez les témoignages de sportifs qui utilisent SportReserve
            </p>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {/* Témoignage 1 */}
            <div className="bg-white p-8 rounded-xl shadow-sm border border-gray-100">
              <div className="flex items-center mb-4">
                <div className="h-12 w-12 rounded-full bg-blue-100 flex items-center justify-center mr-4">
                  <span className="text-blue-600 font-bold">JD</span>
                </div>
                <div>
                  <h4 className="font-bold text-gray-900">Jean Dupont</h4>
                  <p className="text-gray-500 text-sm">Footballeur amateur</p>
                </div>
              </div>
              <p className="text-gray-600 italic">
                "Grâce à SportReserve, je trouve facilement des terrains disponibles pour jouer avec mes amis. Simple et efficace !"
              </p>
              <div className="mt-4 flex text-yellow-400">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                </svg>
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                </svg>
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                </svg>
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                </svg>
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                </svg>
              </div>
            </div>
            
            {/* Témoignage 2 */}
            <div className="bg-white p-8 rounded-xl shadow-sm border border-gray-100">
              <div className="flex items-center mb-4">
                <div className="h-12 w-12 rounded-full bg-green-100 flex items-center justify-center mr-4">
                  <span className="text-green-600 font-bold">SM</span>
                </div>
                <div>
                  <h4 className="font-bold text-gray-900">Sophie Martin</h4>
                  <p className="text-gray-500 text-sm">Joueuse de tennis</p>
                </div>
              </div>
              <p className="text-gray-600 italic">
                "L'application est très intuitive et me permet de trouver rapidement des courts de tennis. Je recommande !"
              </p>
              <div className="mt-4 flex text-yellow-400">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                </svg>
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                </svg>
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                </svg>
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                </svg>
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                </svg>
              </div>
            </div>
            
            {/* Témoignage 3 */}
            <div className="bg-white p-8 rounded-xl shadow-sm border border-gray-100">
              <div className="flex items-center mb-4">
                <div className="h-12 w-12 rounded-full bg-orange-100 flex items-center justify-center mr-4">
                  <span className="text-orange-600 font-bold">TL</span>
                </div>
                <div>
                  <h4 className="font-bold text-gray-900">Thomas Lefebvre</h4>
                  <p className="text-gray-500 text-sm">Coach sportif</p>
                </div>
              </div>
              <p className="text-gray-600 italic">
                "En tant que coach, je peux facilement organiser des sessions pour mes élèves. Un gain de temps considérable !"
              </p>
              <div className="mt-4 flex text-yellow-400">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                </svg>
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                </svg>
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                </svg>
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                </svg>
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                </svg>
              </div>
            </div>
          </div>
        </div>
      </section>
      
      {/* CTA Section */}
      {/* CTA Section */}
      <section className="py-16 bg-gradient-to-r from-blue-600 to-blue-800 text-white">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 text-center">
          <h2 className="text-3xl font-bold mb-6">Prêt à réserver votre prochain terrain?</h2>
          <p className="text-xl text-blue-100 mb-8 max-w-2xl mx-auto">
            Rejoignez des milliers de sportifs qui utilisent SportReserve pour leurs activités
          </p>
          <div className="flex flex-col sm:flex-row justify-center gap-4">
            <Link href="/fields" className="px-8 py-4 bg-white text-blue-700 rounded-lg font-medium hover:bg-blue-50 transition-colors shadow-lg">
              Explorer les terrains
            </Link>
            <Link href="/register" className="px-8 py-4 bg-transparent border-2 border-white text-white rounded-lg font-medium hover:bg-white/10 transition-colors">
              Créer un compte
            </Link>
          </div>
        </div>
      </section>
      
      {/* FAQ Section */}
      <section className="py-16">
        <div className="max-w-4xl mx-auto px-4 sm:px-6">
          <div className="text-center mb-12">
            <h2 className="text-3xl font-bold text-gray-900 mb-4">Questions fréquentes</h2>
            <p className="text-lg text-gray-600 max-w-2xl mx-auto">
              Tout ce que vous devez savoir pour bien commencer
            </p>
          </div>
          
          <div className="space-y-4">
            <div className="bg-white border border-gray-100 rounded-xl shadow-sm">
              <details className="group">
                <summary className="flex justify-between items-center p-6 cursor-pointer">
                  <h3 className="text-lg font-medium text-gray-900">Comment fonctionne la réservation?</h3>
                  <span className="text-blue-600 group-open:rotate-180 transition-transform">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                    </svg>
                  </span>
                </summary>
                <div className="px-6 pb-6 pt-2 text-gray-600">
                  <p>Pour réserver un terrain, parcourez notre catalogue, sélectionnez un terrain qui vous convient, puis choisissez une date et un créneau horaire disponible. Une fois la réservation confirmée, vous recevrez une confirmation par email.</p>
                </div>
              </details>
            </div>
            
            <div className="bg-white border border-gray-100 rounded-xl shadow-sm">
              <details className="group">
                <summary className="flex justify-between items-center p-6 cursor-pointer">
                  <h3 className="text-lg font-medium text-gray-900">Puis-je annuler ma réservation?</h3>
                  <span className="text-blue-600 group-open:rotate-180 transition-transform">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                    </svg>
                  </span>
                </summary>
                <div className="px-6 pb-6 pt-2 text-gray-600">
                  <p>Oui, vous pouvez annuler votre réservation jusqu'à 24 heures avant le créneau réservé. Après ce délai, les annulations ne sont plus possibles et la réservation sera facturée.</p>
                </div>
              </details>
            </div>
            
            <div className="bg-white border border-gray-100 rounded-xl shadow-sm">
              <details className="group">
                <summary className="flex justify-between items-center p-6 cursor-pointer">
                  <h3 className="text-lg font-medium text-gray-900">Comment puis-je payer ma réservation?</h3>
                  <span className="text-blue-600 group-open:rotate-180 transition-transform">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                    </svg>
                  </span>
                </summary>
                <div className="px-6 pb-6 pt-2 text-gray-600">
                  <p>Le paiement s'effectue directement sur place. Nous acceptons les cartes bancaires et les espèces. Certains terrains peuvent proposer des options de paiement en ligne.</p>
                </div>
              </details>
            </div>
            
            <div className="bg-white border border-gray-100 rounded-xl shadow-sm">
              <details className="group">
                <summary className="flex justify-between items-center p-6 cursor-pointer">
                  <h3 className="text-lg font-medium text-gray-900">Faut-il créer un compte pour réserver?</h3>
                  <span className="text-blue-600 group-open:rotate-180 transition-transform">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                    </svg>
                  </span>
                </summary>
                <div className="px-6 pb-6 pt-2 text-gray-600">
                  <p>Oui, un compte est nécessaire pour effectuer une réservation. Cela nous permet de suivre vos réservations et de vous offrir une meilleure expérience personnalisée.</p>
                </div>
              </details>
            </div>
          </div>
        </div>
      </section>
      
      {/* Stats section */}
      <section className="py-16 bg-gray-50">
        <div className="max-w-6xl mx-auto px-4 sm:px-6">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-8 text-center">
            <div>
              <div className="text-4xl font-bold text-blue-600 mb-2">50+</div>
              <p className="text-gray-600">Terrains disponibles</p>
            </div>
            <div>
              <div className="text-4xl font-bold text-blue-600 mb-2">4</div>
              <p className="text-gray-600">Types de sports</p>
            </div>
            <div>
              <div className="text-4xl font-bold text-blue-600 mb-2">1000+</div>
              <p className="text-gray-600">Utilisateurs satisfaits</p>
            </div>
            <div>
              <div className="text-4xl font-bold text-blue-600 mb-2">24/7</div>
              <p className="text-gray-600">Réservation en ligne</p>
            </div>
          </div>
        </div>
      </section>
      
      {/* Newsletter */}
      <section className="py-16">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 text-center">
          <h2 className="text-3xl font-bold text-gray-900 mb-4">Restez informé</h2>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto mb-8">
            Inscrivez-vous à notre newsletter pour recevoir nos actualités et offres spéciales
          </p>
          <div className="flex flex-col sm:flex-row gap-2 max-w-lg mx-auto">
            <input 
              type="email" 
              placeholder="Votre adresse email" 
              className="px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 flex-grow"
            />
            <button className="px-6 py-3 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors">
              S'inscrire
            </button>
          </div>
        </div>
      </section>
    </div>
  );
}


===== frontend/src/app/globals.css =====
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
  --primary: #000000;     /* Nouvelle variable pour la couleur principale (noir) */
  --primary-hover: #333333; /* Couleur de survol légèrement plus claire */
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
    --primary: #000000;
    --primary-hover: #333333;
  }
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

/* Remplacer la couleur bleue par du noir */
.bg-blue-600,
.bg-blue-500,
.bg-blue-700 {
  background-color: var(--primary) !important;
}

/* Pour les états de survol */
.bg-blue-600:hover,
.bg-blue-500:hover,
.bg-blue-700:hover {
  background-color: var(--primary-hover) !important;
}

/* Cibler spécifiquement l'en-tête */
header, 
nav, 
.header, 
.navbar {
  background-color: var(--primary) !important;
}

/* Boutons principaux */
.btn-primary,
button.primary,
button[type="submit"] {
  background-color: var(--primary) !important;
}

/* États de survol pour les boutons */
.btn-primary:hover,
button.primary:hover,
button[type="submit"]:hover {
  background-color: var(--primary-hover) !important;
}


===== frontend/src/app/admin/bookings/layout.js =====
'use client';

import AdminMiddleware from '@/middlewares/adminMiddleware';

export default function AdminFieldsLayout({ children }) {
  return (
    <AdminMiddleware>
      {children}
    </AdminMiddleware>
  );
}


===== frontend/src/app/admin/bookings/new/page.js =====
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { getAllFields } from '@/services/fields';
import { createBooking } from '@/services/bookings';

export default function NewAdminBookingPage() {
  const router = useRouter();
  const [fields, setFields] = useState([]);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState(null);
  
  const [formData, setFormData] = useState({
    field: '',
    date: '',
    timeSlot: '',
    userId: '', // ID de l'utilisateur
    userEmail: '' // Email pour trouver l'utilisateur
  });

  // Créneaux horaires disponibles
  const timeSlots = [
    '09:00-10:00', '10:00-11:00', '11:00-12:00', 
    '14:00-15:00', '15:00-16:00', '16:00-17:00', '17:00-18:00'
  ];

  useEffect(() => {
    const fetchFields = async () => {
      try {
        setLoading(true);
        const fieldsData = await getAllFields();
        setFields(Array.isArray(fieldsData) ? fieldsData : []);
      } catch (err) {
        console.error('Erreur lors du chargement des terrains:', err);
        setError('Impossible de charger les terrains');
      } finally {
        setLoading(false);
      }
    };

    fetchFields();
  }, []);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!formData.field || !formData.date || !formData.timeSlot) {
      setError('Veuillez remplir tous les champs obligatoires');
      return;
    }

    try {
      setSaving(true);
      
      // Création de l'objet de réservation
      const bookingData = {
        field: formData.field,
        date: formData.date,
        timeSlot: formData.timeSlot
      };
      
      // Si un email est fourni, l'ajouter
      if (formData.userEmail) {
        bookingData.userEmail = formData.userEmail;
      }
      
      // Si un ID utilisateur est fourni, l'ajouter
      if (formData.userId) {
        bookingData.user = formData.userId;
      }
      
      await createBooking(bookingData);
      
      alert('Réservation créée avec succès!');
      router.push('/admin/bookings');
    } catch (err) {
      console.error('Erreur lors de la création:', err);
      setError(err.message || 'Une erreur est survenue');
    } finally {
      setSaving(false);
    }
  };

  if (loading) {
    return <div className="p-6 text-center">Chargement des données...</div>;
  }

  return (
    <div className="p-6 max-w-2xl mx-auto">
      <h1 className="text-2xl font-bold mb-6">Créer une nouvelle réservation</h1>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="bg-white p-6 rounded shadow-md">
        <div className="mb-4">
          <label className="block mb-2">Terrain *</label>
          <select
            name="field"
            value={formData.field}
            onChange={handleChange}
            required
            className="w-full p-2 border rounded"
          >
            <option value="">Sélectionnez un terrain</option>
            {fields.map(field => (
              <option key={field._id} value={field._id}>
                {field.name} - {field.location} ({field.sportType})
              </option>
            ))}
          </select>
        </div>
        
        <div className="mb-4">
          <label className="block mb-2">Date *</label>
          <input
            type="date"
            name="date"
            value={formData.date}
            onChange={handleChange}
            required
            min={new Date().toISOString().split('T')[0]}
            className="w-full p-2 border rounded"
          />
        </div>
        
        <div className="mb-4">
          <label className="block mb-2">Créneau horaire *</label>
          <select
            name="timeSlot"
            value={formData.timeSlot}
            onChange={handleChange}
            required
            className="w-full p-2 border rounded"
          >
            <option value="">Sélectionnez un créneau</option>
            {timeSlots.map(slot => (
              <option key={slot} value={slot}>
                {slot}
              </option>
            ))}
          </select>
        </div>
        
        <div className="mb-4">
          <label className="block mb-2">Email de l'utilisateur</label>
          <input
            type="email"
            name="userEmail"
            value={formData.userEmail}
            onChange={handleChange}
            placeholder="email@exemple.com"
            className="w-full p-2 border rounded"
          />
          <p className="text-sm text-gray-500 mt-1">
            L'email de l'utilisateur pour qui vous créez la réservation
          </p>
        </div>
        
        <div className="mb-4">
          <label className="block mb-2">ID de l'utilisateur</label>
          <input
            type="text"
            name="userId"
            value={formData.userId}
            onChange={handleChange}
            placeholder="ID MongoDB de l'utilisateur"
            className="w-full p-2 border rounded"
          />
          <p className="text-sm text-gray-500 mt-1">
            Facultatif si l'email est fourni. Format: 5f8d0e8e2a3b4c5d6e7f8g9h
          </p>
        </div>
        
        <div className="flex justify-between">
          <button
            type="button"
            onClick={() => router.back()}
            className="bg-gray-300 px-4 py-2 rounded"
          >
            Annuler
          </button>
          
          <button
            type="submit"
            disabled={saving}
            className="bg-green-600 text-white px-4 py-2 rounded disabled:bg-green-400"
          >
            {saving ? 'Création en cours...' : 'Créer la réservation'}
          </button>
        </div>
      </form>
    </div>
  );
}


===== frontend/src/app/admin/bookings/page.js =====
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { getAllBookings, updateBookingStatus, cancelBooking, confirmBooking } from '@/services/bookings';
import { getAllFields } from '@/services/fields';
import Link from 'next/link';

export default function AdminBookingsPage() {
  const router = useRouter();
  const [bookings, setBookings] = useState([]);
  const [fields, setFields] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [processing, setProcessing] = useState(false);
  
  // Filtres
  const [filters, setFilters] = useState({
    status: '',
    from: '',
    to: '',
    field: ''
  });

  // Fonction pour charger les données
  const fetchData = async () => {
    try {
      setLoading(true);
      
      // Log des filtres pour déboguer
      console.log('Filtres appliqués:', filters);
      
      // Récupérer les données
      const [bookingsData, fieldsData] = await Promise.all([
        getAllBookings(filters),
        getAllFields()
      ]);
      
      console.log('Réservations reçues:', bookingsData);
      
      // S'assurer que les données sont bien des tableaux
      setBookings(Array.isArray(bookingsData) ? bookingsData : []);
      setFields(Array.isArray(fieldsData) ? fieldsData : []);
    } catch (err) {
      console.error('Erreur lors du chargement des données:', err);
      setError("Impossible de charger les données: " + err.message);
    } finally {
      setLoading(false);
    }
  };

  // Charger les données au chargement de la page
  useEffect(() => {
    fetchData();
  }, []);

  // Mettre à jour les filtres
  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Appliquer les filtres
  const applyFilters = () => {
    fetchData();
  };

  // Réinitialiser les filtres
  const resetFilters = () => {
    setFilters({
      status: '',
      from: '',
      to: '',
      field: ''
    });
    // Recharger les données avec les filtres réinitialisés
    setTimeout(fetchData, 0);
  };

  // Confirmer une réservation
  const handleConfirmBooking = async (bookingId) => {
    try {
      setProcessing(true);
      await confirmBooking(bookingId);
      
      // Mettre à jour la liste des réservations
      const updatedBookings = bookings.map(booking => 
        booking._id === bookingId ? { ...booking, status: 'confirmed' } : booking
      );
      
      setBookings(updatedBookings);
      alert('Réservation confirmée avec succès');
    } catch (err) {
      console.error('Erreur lors de la confirmation:', err);
      alert(`Erreur lors de la confirmation: ${err.message}`);
    } finally {
      setProcessing(false);
    }
  };

  // Annuler une réservation
  const handleCancelBooking = async (bookingId) => {
    if (!window.confirm('Êtes-vous sûr de vouloir annuler cette réservation?')) {
      return;
    }
    
    try {
      setProcessing(true);
      await cancelBooking(bookingId);
      
      // Mettre à jour la liste des réservations
      const updatedBookings = bookings.map(booking => 
        booking._id === bookingId ? { ...booking, status: 'cancelled' } : booking
      );
      
      setBookings(updatedBookings);
      alert('Réservation annulée avec succès');
    } catch (err) {
      console.error('Erreur lors de l\'annulation:', err);
      alert(`Erreur lors de l'annulation: ${err.message}`);
    } finally {
      setProcessing(false);
    }
  };

  // Formater la date
  const formatDate = (dateString) => {
    try {
      return new Date(dateString).toLocaleDateString('fr-FR', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    } catch (err) {
      console.error('Erreur de formatage de date:', err);
      return dateString;
    }
  };

  // Obtenir le nom du terrain à partir de son ID
  const getFieldName = (field) => {
    console.log("Field reçu:", field);
    
    // Si field est déjà un objet avec un nom, l'utiliser directement
    if (field && typeof field === 'object' && field.name) {
      console.log("Utilisation du nom déjà présent:", field.name);
      return field.name;
    }
    
    // Extraire l'ID
    const fieldId = field && typeof field === 'object' ? field._id : field;
    console.log("ID du terrain extrait:", fieldId);
    
    // Chercher dans la liste des terrains
    const foundField = fields.find(f => f._id === fieldId);
    console.log("Terrain trouvé:", foundField);
    
    return foundField ? foundField.name : 'Terrain inconnu';
  };

  // Obtenir le nom d'utilisateur
  const getUserName = (user) => {
    if (!user) return 'Utilisateur inconnu';
    if (typeof user === 'string') return user;
    return user.name || user.email || 'Utilisateur ' + user._id;
  };

  // État de chargement
  if (loading) {
    return <div className="p-6 text-center">Chargement des réservations...</div>;
  }

  // Affichage des erreurs
  if (error) {
    return (
      <div className="p-6 text-center">
        <div className="bg-red-100 text-red-700 p-4 rounded mb-4">
          {error}
        </div>
        <button
          onClick={() => window.location.reload()}
          className="bg-blue-500 text-white px-4 py-2 rounded"
        >
          Réessayer
        </button>
      </div>
    );
  }

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Gestion des réservations</h1>
        <Link 
          href="/admin/bookings/new" 
          className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
        >
          Ajouter une réservation
        </Link>
      </div>
        
      
      {/* Filtres */}
      <div className="bg-white p-4 rounded shadow mb-6">
        <h2 className="text-lg font-semibold mb-4">Filtres</h2>
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div>
            <label className="block mb-1 text-sm">Statut</label>
            <select
              name="status"
              value={filters.status}
              onChange={handleFilterChange}
              className="w-full p-2 border rounded"
            >
              <option value="">Tous</option>
              <option value="pending">En attente</option>
              <option value="confirmed">Confirmé</option>
              <option value="cancelled">Annulé</option>
            </select>
          </div>
          
          <div>
            <label className="block mb-1 text-sm">Terrain</label>
            <select
              name="field"
              value={filters.field}
              onChange={handleFilterChange}
              className="w-full p-2 border rounded"
            >
              <option value="">Tous les terrains</option>
              {fields.map(field => (
                <option key={field._id} value={field._id}>
                  {field.name}
                </option>
              ))}
            </select>
          </div>
          
          <div>
            <label className="block mb-1 text-sm">Du</label>
            <input
              type="date"
              name="from"
              value={filters.from}
              onChange={handleFilterChange}
              className="w-full p-2 border rounded"
            />
          </div>
          
          <div>
            <label className="block mb-1 text-sm">Au</label>
            <input
              type="date"
              name="to"
              value={filters.to}
              onChange={handleFilterChange}
              className="w-full p-2 border rounded"
            />
          </div>
        </div>
        
        <div className="mt-4 flex justify-end space-x-2">
          <button
            onClick={resetFilters}
            className="bg-gray-200 text-gray-800 px-4 py-2 rounded hover:bg-gray-300"
          >
            Réinitialiser
          </button>
          <button
            onClick={applyFilters}
            className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
          >
            Appliquer les filtres
          </button>
        </div>
      </div>
      
      {/* Liste des réservations */}
      <div className="bg-white rounded shadow overflow-x-auto">
        {bookings.length === 0 ? (
          <div className="p-6 text-center text-gray-500">
            Aucune réservation trouvée
          </div>
        ) : (
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Terrain</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Créneau</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Utilisateur</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Statut</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {bookings.map((booking) => (
                <tr key={booking._id}>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    {booking._id.substring(0, 8)}...
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {getFieldName(booking.field)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {formatDate(booking.date)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {booking.timeSlot}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    {getUserName(booking.user)}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full 
                      ${booking.status === 'confirmed' ? 'bg-green-100 text-green-800' : 
                        booking.status === 'cancelled' ? 'bg-red-100 text-red-800' : 
                        'bg-yellow-100 text-yellow-800'}`}
                    >
                      {booking.status === 'confirmed' ? 'Confirmé' : 
                       booking.status === 'cancelled' ? 'Annulé' : 
                       'En attente'}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2">
                    {booking.status === 'pending' && (
                      <>
                        <button
                          onClick={() => handleConfirmBooking(booking._id)}
                          disabled={processing}
                          className="text-green-600 hover:text-green-900"
                        >
                          Confirmer
                        </button>
                        <button
                          onClick={() => handleCancelBooking(booking._id)}
                          disabled={processing}
                          className="text-red-600 hover:text-red-900 ml-2"
                        >
                          Annuler
                        </button>
                      </>
                    )}
                    {booking.status === 'confirmed' && (
                      <button
                        onClick={() => handleCancelBooking(booking._id)}
                        disabled={processing}
                        className="text-red-600 hover:text-red-900"
                      >
                        Annuler
                      </button>
                    )}
                    {booking.status === 'cancelled' && (
                      <span className="text-gray-400">Aucune action</span>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </div>
    </div>
  );
}


===== frontend/src/app/admin/fields/edit/[id]/page.js =====
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { getFieldById, updateField } from '@/services/fields';

export default function EditFieldPage({ params }) {
  const router = useRouter();
  const { id } = params;
  
  const [formData, setFormData] = useState({
    name: '',
    sportType: '',
    location: '',
    pricePerHour: ''
  });
  
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchField = async () => {
      try {
        setLoading(true);
        const field = await getFieldById(id);
        setFormData({
          name: field.name || '',
          sportType: field.sportType || 'football',
          location: field.location || '',
          pricePerHour: field.pricePerHour || ''
        });
      } catch (err) {
        console.error('Erreur lors du chargement du terrain:', err);
        setError('Impossible de charger les données du terrain');
      } finally {
        setLoading(false);
      }
    };

    if (id) {
      fetchField();
    }
  }, [id]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: name === 'pricePerHour' ? Number(value) : value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      setSaving(true);
      await updateField(id, formData);
      alert('Terrain modifié avec succès!');
      router.push('/admin/fields');
    } catch (err) {
      console.error('Erreur lors de la modification:', err);
      setError(err.message || 'Une erreur est survenue');
    } finally {
      setSaving(false);
    }
  };

  if (loading) {
    return <div className="p-6 text-center">Chargement des données...</div>;
  }

  return (
    <div className="p-6 max-w-2xl mx-auto">
      <h1 className="text-2xl font-bold mb-6">Modifier le terrain</h1>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="bg-white p-6 rounded shadow-md">
        <div className="mb-4">
          <label className="block mb-2">Nom du terrain</label>
          <input
            type="text"
            name="name"
            value={formData.name}
            onChange={handleChange}
            required
            className="w-full p-2 border rounded"
          />
        </div>
        
        <div className="mb-4">
          <label className="block mb-2">Type de sport</label>
          <select
            name="sportType"
            value={formData.sportType}
            onChange={handleChange}
            className="w-full p-2 border rounded"
          >
            <option value="football">Football</option>
            <option value="basketball">Basketball</option>
            <option value="tennis">Tennis</option>
            <option value="padel">Padel</option>
          </select>
        </div>
        
        <div className="mb-4">
          <label className="block mb-2">Localisation</label>
          <input
            type="text"
            name="location"
            value={formData.location}
            onChange={handleChange}
            required
            className="w-full p-2 border rounded"
          />
        </div>
        
        <div className="mb-4">
          <label className="block mb-2">Prix par heure (€)</label>
          <input
            type="number"
            name="pricePerHour"
            value={formData.pricePerHour}
            onChange={handleChange}
            required
            min="0"
            step="0.01"
            className="w-full p-2 border rounded"
          />
        </div>
        
        <div className="flex justify-between">
          <button
            type="button"
            onClick={() => router.back()}
            className="bg-gray-300 px-4 py-2 rounded"
          >
            Annuler
          </button>
          
          <button
            type="submit"
            disabled={saving}
            className="bg-blue-600 text-white px-4 py-2 rounded disabled:bg-blue-400"
          >
            {saving ? 'Sauvegarde...' : 'Enregistrer les modifications'}
          </button>
        </div>
      </form>
    </div>
  );
}


===== frontend/src/app/admin/fields/layout.js =====
'use client';

import AdminMiddleware from '@/middlewares/adminMiddleware';

export default function AdminFieldsLayout({ children }) {
  return (
    <AdminMiddleware>
      {children}
    </AdminMiddleware>
  );
}


===== frontend/src/app/admin/fields/new/page.js =====
'use client';

import { useState, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { createField } from '@/services/fields';
import Image from 'next/image';

export default function NewFieldPage() {
  const router = useRouter();
  const fileInputRef = useRef(null);
  const [formData, setFormData] = useState({
    name: '',
    sportType: 'football',
    location: '',
    pricePerHour: '',
    image: null
  });
  const [preview, setPreview] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: name === 'pricePerHour' ? Number(value) : value
    }));
  };

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setFormData(prev => ({
        ...prev,
        image: file
      }));

      // Créer un aperçu de l'image
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreview(reader.result);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      // Créer FormData pour l'upload
      const formDataToSubmit = new FormData();
      formDataToSubmit.append('name', formData.name);
      formDataToSubmit.append('sportType', formData.sportType);
      formDataToSubmit.append('location', formData.location);
      formDataToSubmit.append('pricePerHour', formData.pricePerHour);
      
      // Ajouter l'image si présente
      if (formData.image) {
        formDataToSubmit.append('image', formData.image);
      }

      await createField(formDataToSubmit);
      alert('Terrain créé avec succès!');
      router.push('/admin/fields');
    } catch (err) {
      console.error('Erreur lors de la création:', err);
      setError(err.response?.data?.error || err.message || 'Une erreur est survenue');
    } finally {
      setLoading(false);
    }
  };

  const triggerFileInput = () => {
    fileInputRef.current.click();
  };

  return (
    <div className="p-6 max-w-2xl mx-auto">
      <h1 className="text-2xl font-bold mb-6">Ajouter un nouveau terrain</h1>
      
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}
      
      <form onSubmit={handleSubmit} className="bg-white p-6 rounded shadow-md">
        {/* Champ de téléchargement d'image */}
        <div className="mb-4">
          <label className="block mb-2">Image du terrain</label>
          <input
            type="file"
            ref={fileInputRef}
            onChange={handleImageChange}
            accept="image/jpeg,image/png,image/webp"
            className="hidden"
          />
          
          <div 
            onClick={triggerFileInput}
            className="w-full h-48 border-2 border-dashed border-gray-300 rounded flex items-center justify-center cursor-pointer hover:border-blue-500 transition-colors"
          >
            {preview ? (
              <Image 
                src={preview} 
                alt="Aperçu de l'image" 
                width={400} 
                height={192} 
                className="object-cover w-full h-full rounded"
              />
            ) : (
              <div className="text-center text-gray-500">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 mx-auto mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
                Cliquez pour télécharger une image
              </div>
            )}
          </div>
        </div>

        {/* Reste du formulaire (inchangé) */}
        <div className="mb-4">
          <label className="block mb-2">Nom du terrain</label>
          <input
            type="text"
            name="name"
            value={formData.name}
            onChange={handleChange}
            required
            className="w-full p-2 border rounded"
          />
        </div>
        
        <div className="mb-4">
          <label className="block mb-2">Type de sport</label>
          <select
            name="sportType"
            value={formData.sportType}
            onChange={handleChange}
            className="w-full p-2 border rounded"
          >
            <option value="football">Football</option>
            <option value="basketball">Basketball</option>
            <option value="tennis">Tennis</option>
            <option value="padel">Padel</option>
          </select>
        </div>
        
        <div className="mb-4">
          <label className="block mb-2">Localisation</label>
          <input
            type="text"
            name="location"
            value={formData.location}
            onChange={handleChange}
            required
            className="w-full p-2 border rounded"
          />
        </div>
        
        <div className="mb-4">
          <label className="block mb-2">Prix par heure (€)</label>
          <input
            type="number"
            name="pricePerHour"
            value={formData.pricePerHour}
            onChange={handleChange}
            required
            min="0"
            step="0.01"
            className="w-full p-2 border rounded"
          />
        </div>
        
        <div className="flex justify-between">
          <button
            type="button"
            onClick={() => router.back()}
            className="bg-gray-300 px-4 py-2 rounded"
          >
            Annuler
          </button>
          
          <button
            type="submit"
            disabled={loading}
            className="bg-green-600 text-white px-4 py-2 rounded disabled:bg-green-400"
          >
            {loading ? 'En cours...' : 'Enregistrer'}
          </button>
        </div>
      </form>
    </div>
  );
}


===== frontend/src/app/admin/fields/page.js =====
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { getAllFields, deleteField } from '@/services/fields';
import Link from 'next/link';

export default function AdminFieldsPage() {
  const router = useRouter();
  const [fields, setFields] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isDeleting, setIsDeleting] = useState(false);

  const fetchFields = async () => {
    try {
      setLoading(true);
      const data = await getAllFields();
      setFields(data);
    } catch (err) {
      setError("Erreur lors du chargement des terrains");
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchFields();
  }, []);

  const handleDeleteField = async (fieldId, fieldName) => {
    // Confirmation de suppression
    if (!window.confirm(`Êtes-vous sûr de vouloir supprimer le terrain "${fieldName}" ?`)) {
      return;
    }
    
    try {
      setIsDeleting(true);
      await deleteField(fieldId);
      alert('Terrain supprimé avec succès');
      // Recharger la liste des terrains
      await fetchFields();
    } catch (err) {
      alert(`Erreur lors de la suppression: ${err.message}`);
      console.error('Erreur de suppression:', err);
    } finally {
      setIsDeleting(false);
    }
  };

  if (loading) return <div className="p-6 text-center">Chargement...</div>;
  if (error) return <div className="p-6 text-center text-red-600">Erreur: {error}</div>;

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Gestion des terrains</h1>
        <Link 
          href="/admin/fields/new" 
          className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
        >
          Ajouter un terrain
        </Link>
      </div>

      <div className="bg-white rounded shadow overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nom</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Localisation</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Prix/h</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {fields.length === 0 ? (
              <tr>
                <td colSpan="5" className="px-6 py-4 text-center text-gray-500">
                  Aucun terrain disponible
                </td>
              </tr>
            ) : (
              fields.map((field) => (
                <tr key={field._id}>
                  <td className="px-6 py-4 whitespace-nowrap">{field.name}</td>
                  <td className="px-6 py-4 whitespace-nowrap">{field.sportType}</td>
                  <td className="px-6 py-4 whitespace-nowrap">{field.location}</td>
                  <td className="px-6 py-4 whitespace-nowrap">{field.pricePerHour}€</td>
                  <td className="px-6 py-4 whitespace-nowrap space-x-2">
                    <Link 
                      href={`/admin/fields/edit/${field._id}`}
                      className="text-indigo-600 hover:text-indigo-900"
                    >
                      Modifier
                    </Link>
                    <button 
                      className="text-red-600 hover:text-red-900 ml-2"
                      disabled={isDeleting}
                      onClick={() => handleDeleteField(field._id, field.name)}
                    >
                      Supprimer
                    </button>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}


===== frontend/src/app/register/page.js =====
// src/app/register/page.js
import RegisterForm from '@/components/auth/RegisterForm';

export default function RegisterPage() {
  return (
    <div className="min-h-screen flex flex-col justify-center items-center bg-[#fafafa] px-4">
      <div className="w-full max-w-md">
        <div className="mb-8 text-center">
          <h1 className="text-4xl font-bold mb-2 text-black">SportReserve</h1>
          <p className="text-gray-600">Créez votre compte</p>
        </div>
        <RegisterForm />
      </div>
    </div>
  );
}


===== frontend/src/app/fields/page.js =====
// src/app/fields/page.js
'use client';

import { useState, useEffect, Suspense } from 'react';
import { useSearchParams } from 'next/navigation';
import { getAllFields, getFieldsByType } from '@/services/fields';
import Link from 'next/link';

// Composant de carte de terrain amélioré
const FieldCard = ({ field }) => {
  const fieldId = field._id || field.id;
  
  // Définir les couleurs pour les différents types de sport
  const sportColors = {
    football: { bg: 'bg-green-100', text: 'text-green-800', icon: (
      <svg xmlns="http://www.w3.org/2000/svg" className="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor">
        <circle cx="12" cy="12" r="10" strokeWidth="1.5"/>
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" d="M12 2v4m0 16v-4m10-8h-4M6 12H2m17.5-5.5l-2.8 2.8M7.3 16.7l-2.8 2.8M19.7 16.7l-2.8-2.8M7.3 7.3L4.5 4.5"/>
      </svg>
    )},
    basketball: { bg: 'bg-orange-100', text: 'text-orange-800', icon: (
      <svg xmlns="http://www.w3.org/2000/svg" className="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor">
        <circle cx="12" cy="12" r="10" strokeWidth="1.5"/>
        <path strokeLinecap="round" strokeWidth="1.5" d="M4.93 4.93L19.07 19.07M12 2v20M22 12H2"/>
      </svg>
    )},
    tennis: { bg: 'bg-yellow-100', text: 'text-yellow-800', icon: (
      <svg xmlns="http://www.w3.org/2000/svg" className="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor">
        <circle cx="12" cy="12" r="10" strokeWidth="1.5"/>
        <path d="M18 3.5C16 8 16 16 18 20.5M6 3.5C8 8 8 16 6 20.5" strokeWidth="1.5"/>
      </svg>
    )},
    padel: { bg: 'bg-purple-100', text: 'text-purple-800', icon: (
      <svg xmlns="http://www.w3.org/2000/svg" className="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor">
        <rect x="5" y="5" width="14" height="14" rx="2" strokeWidth="1.5"/>
        <line x1="5" y1="12" x2="19" y2="12" strokeWidth="1.5"/>
        <line x1="12" y1="5" x2="12" y2="19" strokeWidth="1.5"/>
      </svg>
    )}
  };
  
  // Utiliser les couleurs du type de sport ou des valeurs par défaut
  const sportStyle = sportColors[field.sportType] || { bg: 'bg-blue-100', text: 'text-blue-800' };
  
  return (
    <div className="bg-white rounded-xl shadow-sm hover:shadow-md transition-shadow overflow-hidden border border-gray-100">
      <div className="p-5">
        <div className="flex justify-between items-start mb-4">
          <h3 className="text-lg font-bold text-gray-800">{field.name}</h3>
          <span className={`flex items-center px-3 py-1 rounded-full text-xs font-medium ${sportStyle.bg} ${sportStyle.text}`}>
            {sportStyle.icon && <span className="mr-1">{sportStyle.icon}</span>}
            {field.sportType.charAt(0).toUpperCase() + field.sportType.slice(1)}
          </span>
        </div>
        
        <div className="mb-4">
          <div className="flex items-center text-gray-500 mb-2">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
            <span className="text-sm">{field.location}</span>
          </div>
          
          <div className="flex items-center text-gray-500">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <span className="text-sm">{field.pricePerHour}€/heure</span>
          </div>
        </div>
      </div>
      
      <div className="px-5 py-3 bg-gray-50 border-t border-gray-100">
        {fieldId ? (
          <Link href={`/fields/${fieldId}`} className="block w-full py-2 px-4 bg-blue-600 hover:bg-blue-700 text-white text-center rounded-md font-medium transition-colors">
            Voir le terrain
          </Link>
        ) : (
          <button
            onClick={() => alert("Impossible d'afficher les détails: ID du terrain manquant")}
            className="block w-full py-2 px-4 bg-gray-400 text-white text-center rounded-md font-medium cursor-not-allowed"
          >
            Non disponible
          </button>
        )}
      </div>
    </div>
  );
};

// Composant de filtre amélioré
const FieldFilter = ({ onFilterChange, filters, sportTypeCounts, priceRange }) => {
  const [localFilters, setLocalFilters] = useState(filters);
  
  const handleChange = (e) => {
    const { name, value } = e.target;
    const newFilters = { ...localFilters, [name]: value };
    setLocalFilters(newFilters);
    onFilterChange(newFilters);
  };

  const handleReset = () => {
    const resetFilters = {
      sportType: '',
      priceMax: '',
      searchTerm: ''
    };
    setLocalFilters(resetFilters);
    onFilterChange(resetFilters);
  };

  return (
    <div className="bg-white rounded-xl shadow-sm p-6 mb-8 border border-gray-100">
      <h2 className="text-xl font-bold text-gray-800 mb-6">Filtrer les terrains</h2>
      
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Type de sport avec compteurs */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Type de sport
          </label>
          <div className="space-y-2">
            <div 
              className={`flex items-center justify-between px-4 py-3 rounded-lg cursor-pointer border ${
                localFilters.sportType === '' ? 'border-blue-500 bg-blue-50' : 'border-gray-200 hover:border-gray-300'
              }`}
              onClick={() => handleChange({ target: { name: 'sportType', value: '' } })}
            >
              <span className="font-medium">Tous les sports</span>
              <span className="text-sm text-gray-500">{sportTypeCounts.total || 0}</span>
            </div>
            
            <div 
              className={`flex items-center justify-between px-4 py-3 rounded-lg cursor-pointer border ${
                localFilters.sportType === 'football' ? 'border-blue-500 bg-blue-50' : 'border-gray-200 hover:border-gray-300'
              }`}
              onClick={() => handleChange({ target: { name: 'sportType', value: 'football' } })}
            >
              <div className="flex items-center">
                <span className="inline-block w-4 h-4 rounded-full bg-green-500 mr-3"></span>
                <span className="font-medium">Football</span>
              </div>
              <span className="text-sm text-gray-500">{sportTypeCounts.football || 0}</span>
            </div>
            
            <div 
              className={`flex items-center justify-between px-4 py-3 rounded-lg cursor-pointer border ${
                localFilters.sportType === 'basketball' ? 'border-blue-500 bg-blue-50' : 'border-gray-200 hover:border-gray-300'
              }`}
              onClick={() => handleChange({ target: { name: 'sportType', value: 'basketball' } })}
            >
              <div className="flex items-center">
                <span className="inline-block w-4 h-4 rounded-full bg-orange-500 mr-3"></span>
                <span className="font-medium">Basketball</span>
              </div>
              <span className="text-sm text-gray-500">{sportTypeCounts.basketball || 0}</span>
            </div>
            
            <div 
              className={`flex items-center justify-between px-4 py-3 rounded-lg cursor-pointer border ${
                localFilters.sportType === 'tennis' ? 'border-blue-500 bg-blue-50' : 'border-gray-200 hover:border-gray-300'
              }`}
              onClick={() => handleChange({ target: { name: 'sportType', value: 'tennis' } })}
            >
              <div className="flex items-center">
                <span className="inline-block w-4 h-4 rounded-full bg-yellow-500 mr-3"></span>
                <span className="font-medium">Tennis</span>
              </div>
              <span className="text-sm text-gray-500">{sportTypeCounts.tennis || 0}</span>
            </div>
            
            <div 
              className={`flex items-center justify-between px-4 py-3 rounded-lg cursor-pointer border ${
                localFilters.sportType === 'padel' ? 'border-blue-500 bg-blue-50' : 'border-gray-200 hover:border-gray-300'
              }`}
              onClick={() => handleChange({ target: { name: 'sportType', value: 'padel' } })}
            >
              <div className="flex items-center">
                <span className="inline-block w-4 h-4 rounded-full bg-purple-500 mr-3"></span>
                <span className="font-medium">Padel</span>
              </div>
              <span className="text-sm text-gray-500">{sportTypeCounts.padel || 0}</span>
            </div>
          </div>
        </div>
        
        {/* Prix et recherche */}
        <div className="space-y-6 lg:col-span-2">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Prix maximum (€/h)
            </label>
            <div className="space-y-2">
              <input
                type="range"
                name="priceMax"
                min={priceRange.min}
                max={priceRange.max}
                value={localFilters.priceMax || priceRange.max}
                onChange={handleChange}
                className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
              />
              <div className="flex justify-between text-sm text-gray-500">
                <span>{priceRange.min}€</span>
                <span>{localFilters.priceMax || priceRange.max}€</span>
                <span>{priceRange.max}€</span>
              </div>
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Rechercher
            </label>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <svg className="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
              </div>
              <input
                type="text"
                name="searchTerm"
                value={localFilters.searchTerm}
                onChange={handleChange}
                placeholder="Rechercher par nom ou lieu"
                className="pl-10 w-full py-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </div>
          
          <div className="flex justify-end">
            <button
              onClick={handleReset}
              className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
            >
              Réinitialiser les filtres
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// Composant principal qui utilise useSearchParams
function FieldsContent() {
  const searchParams = useSearchParams();
  const initialType = searchParams?.get('type') || '';
  
  const [fields, setFields] = useState([]);
  const [filteredFields, setFilteredFields] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [filters, setFilters] = useState({
    sportType: initialType,
    priceMax: '',
    searchTerm: ''
  });
  
  // Statistiques pour les filtres
  const [sportTypeCounts, setSportTypeCounts] = useState({
    total: 0,
    football: 0,
    basketball: 0,
    tennis: 0,
    padel: 0
  });
  
  // Prix min et max pour le slider
  const [priceRange, setPriceRange] = useState({
    min: 0,
    max: 100
  });

  useEffect(() => {
    const fetchFields = async () => {
      try {
        setLoading(true);
        
        let data;
        if (initialType) {
          data = await getFieldsByType(initialType);
        } else {
          data = await getAllFields();
        }
        
        if (data) {
          // Normaliser les données
          const fieldsArray = Array.isArray(data) ? data : 
                            (data._id ? [data] : 
                            Object.values(data).find(val => Array.isArray(val)) || []);
          
          setFields(fieldsArray);
          setFilteredFields(fieldsArray);
          
          // Calculer les statistiques
          const counts = { total: fieldsArray.length };
          const prices = [];
          
          fieldsArray.forEach(field => {
            // Compter par type de sport
            const type = field.sportType;
            counts[type] = (counts[type] || 0) + 1;
            
            // Collecter les prix pour trouver min/max
            if (field.pricePerHour) {
              prices.push(field.pricePerHour);
            }
          });
          
          setSportTypeCounts(counts);
          
          // Trouver min et max prix
          if (prices.length > 0) {
            setPriceRange({
              min: Math.floor(Math.min(...prices)),
              max: Math.ceil(Math.max(...prices))
            });
          }
        }
      } catch (err) {
        console.error('Erreur lors du chargement des terrains:', err);
        setError('Erreur lors du chargement des terrains. Veuillez réessayer.');
      } finally {
        setLoading(false);
      }
    };

    fetchFields();
  }, [initialType]);

  useEffect(() => {
    if (!fields || fields.length === 0) return;
    
    // Filtrer les terrains selon les critères sélectionnés
    let result = [...fields];
    
    if (filters.sportType) {
      result = result.filter(field => field.sportType === filters.sportType);
    }
    
    if (filters.priceMax && !isNaN(filters.priceMax) && filters.priceMax > 0) {
      result = result.filter(field => field.pricePerHour <= parseFloat(filters.priceMax));
    }
    
    if (filters.searchTerm) {
      const searchLower = filters.searchTerm.toLowerCase();
      result = result.filter(field => 
        (field.name?.toLowerCase() || '').includes(searchLower) || 
        (field.location?.toLowerCase() || '').includes(searchLower)
      );
    }
    
    setFilteredFields(result);
  }, [fields, filters]);

  const handleFilterChange = (newFilters) => {
    setFilters(newFilters);
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex justify-center items-center">
        <div className="w-16 h-16 border-4 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 p-6">
        <div className="max-w-6xl mx-auto">
          <div className="bg-red-50 border border-red-200 text-red-700 px-6 py-4 rounded-xl mb-6">
            <div className="flex items-center">
              <svg className="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <p>{error}</p>
            </div>
          </div>
          <button 
            onClick={() => window.location.reload()}
            className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors"
          >
            Réessayer
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-12 px-4 sm:px-6">
      <div className="max-w-6xl mx-auto">
        {/* En-tête de page */}
        <div className="mb-8 text-center">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Explorez nos terrains sportifs</h1>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto">
            Trouvez et réservez le terrain idéal pour votre activité sportive préférée
          </p>
        </div>
        
        {/* Filtres */}
        <FieldFilter 
          onFilterChange={handleFilterChange} 
          filters={filters} 
          sportTypeCounts={sportTypeCounts}
          priceRange={priceRange}
        />
        
        {/* Résultats */}
        {filteredFields.length === 0 ? (
          <div className="bg-white rounded-xl shadow-sm p-12 text-center border border-gray-100">
            <svg className="w-16 h-16 text-gray-300 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M19 21H5a2 2 0 01-2-2V5a2 2 0 012-2h11l5 5v11a2 2 0 01-2 2z" />
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M12 17v.01M12 13a1 1 0 010-2V8" />
            </svg>
            <h3 className="text-gray-800 text-xl font-bold mb-2">Aucun terrain ne correspond à vos critères</h3>
            <p className="text-gray-500 mb-6">Essayez de modifier vos filtres ou d'élargir votre recherche</p>
            <button
              onClick={handleFilterChange.bind(null, { sportType: '', priceMax: '', searchTerm: '' })}
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors"
            >
              Réinitialiser tous les filtres
            </button>
          </div>
        ) : (
          <>
            <div className="mb-6 flex justify-between items-center">
              <p className="text-gray-600">{filteredFields.length} terrain(s) trouvé(s)</p>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {filteredFields.map((field, index) => (
                <FieldCard key={field._id || index} field={field} />
              ))}
            </div>
          </>
        )}
      </div>
    </div>
  );
}

// Composant principal qui encapsule le contenu dans Suspense
export default function FieldsPage() {
  return (
    <Suspense fallback={
      <div className="min-h-screen bg-gray-50 flex justify-center items-center">
        <div className="w-16 h-16 border-4 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
      </div>
    }>
      <FieldsContent />
    </Suspense>
  );
}


===== frontend/src/app/fields/[id]/page.js =====
// src/app/fields/[id]/page.js
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { getFieldById } from '@/services/fields';
import { isAuthenticated } from '@/services/auth';

export default function FieldDetailPage({ params }) {
  const router = useRouter();
  const { id } = params;
  
  const [field, setField] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // États pour la réservation
  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);
  const [timeSlots, setTimeSlots] = useState([]);

  // Créneaux horaires simulés - à remplacer par des données de l'API
  const availableTimeSlots = [
    '09:00-10:00', '10:00-11:00', '11:00-12:00', 
    '14:00-15:00', '15:00-16:00', '16:00-17:00', '17:00-18:00'
  ];

  useEffect(() => {
    const fetchFieldData = async () => {
      try {
        // Charger les données du terrain
        const fieldData = await getFieldById(id);
        setField(fieldData);
        
        // Générer des créneaux horaires simulés
        generateTimeSlots(selectedDate);
      } catch (err) {
        console.error("Erreur lors du chargement du terrain:", err);
        setError("Impossible de charger les détails du terrain");
      } finally {
        setLoading(false);
      }
    };

    if (id) {
      fetchFieldData();
    }
  }, [id]);

  // Fonction pour générer des créneaux horaires disponibles
  const generateTimeSlots = (date) => {
    // Ici, vous feriez normalement un appel API pour obtenir les créneaux réellement disponibles
    // Pour l'instant, nous simulons des créneaux disponibles de manière aléatoire
    setTimeSlots(availableTimeSlots.map(slot => ({
      slot,
      available: Math.random() > 0.3 // Simuler des créneaux déjà réservés
    })));
  };

  const handleDateChange = (e) => {
    const newDate = e.target.value;
    setSelectedDate(newDate);
    generateTimeSlots(newDate);
  };

  const handleReservation = (timeSlot) => {
    if (!isAuthenticated()) {
      alert('Veuillez vous connecter pour réserver un terrain.');
      router.push('/login');
      return;
    }
    
    // Rediriger vers la page de confirmation de réservation
    router.push(`/bookings/new?field=${id}&date=${selectedDate}&timeSlot=${timeSlot}`);
  };

  if (loading) {
    return <div className="flex justify-center items-center min-h-screen">Chargement des détails...</div>;
  }

  if (error) {
    return (
      <div className="p-6">
        <div className="bg-red-100 text-red-700 p-4 rounded-md mb-4">
          {error}
        </div>
        <button
          onClick={() => router.back()}
          className="bg-blue-600 text-white px-4 py-2 rounded-md"
        >
          Retour
        </button>
      </div>
    );
  }

  if (!field) {
    return <div className="flex justify-center items-center min-h-screen">Terrain non trouvé</div>;
  }

  return (
    <div className="p-6 max-w-4xl mx-auto">
      {/* Information du terrain */}
      <div className="bg-white p-6 rounded-lg shadow-md mb-6">
        <h1 className="text-3xl font-bold mb-4">{field.name}</h1>
        <p className="mb-2">{field.location}</p>
        <p className="mb-2">Type: {field.sportType}</p>
        <p className="mb-2">Prix: {field.pricePerHour}€/heure</p>
      </div>
      
      {/* Section de réservation */}
      <div className="bg-white p-6 rounded-lg shadow-md mb-6">
        <h2 className="text-xl font-semibold mb-4">Réserver ce terrain</h2>
        
        <div className="mb-4">
          <label className="block mb-2 font-medium">
            Sélectionnez une date
          </label>
          <input
            type="date"
            value={selectedDate}
            onChange={handleDateChange}
            min={new Date().toISOString().split('T')[0]}
            className="w-full p-2 border border-gray-300 rounded-md"
          />
        </div>
        
        <div>
          <h3 className="text-lg font-medium mb-3">
            Créneaux disponibles
          </h3>
          
          <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3 mb-4">
            {timeSlots.map(({ slot, available }) => (
              <button
                key={slot}
                onClick={() => available && handleReservation(slot)}
                disabled={!available}
                className={`p-2 border rounded-md ${
                  available 
                    ? 'border-green-500 bg-green-50 text-green-700 hover:bg-green-100' 
                    : 'border-gray-300 bg-gray-100 text-gray-500 cursor-not-allowed'
                }`}
              >
                {slot}
              </button>
            ))}
          </div>
          
          <p className="text-gray-500 text-sm italic">
            Cliquez sur un créneau disponible pour effectuer une réservation
          </p>
        </div>
      </div>
      
      <button 
        onClick={() => router.back()}
        className="bg-blue-600 text-white px-4 py-2 rounded-md"
      >
        Retour
      </button>
    </div>
  );
}


===== frontend/src/middlewares/adminMiddleware.js =====
'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { isAuthenticated } from '@/services/auth';

// Fonction pour vérifier si l'utilisateur est admin
const getUserRole = () => {
  if (typeof window === 'undefined') return null;
  
  try {
    const token = localStorage.getItem('token');
    if (!token) return null;
    
    // Décodez le token JWT pour vérifier le rôle
    const payload = JSON.parse(atob(token.split('.')[1]));
    return payload.role;
  } catch (error) {
    console.error('Erreur lors de la vérification du rôle:', error);
    return null;
  }
};

export default function AdminMiddleware({ children }) {
  const router = useRouter();
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (!isAuthenticated()) {
      router.push('/login');
      return;
    }

    const role = getUserRole();
    if (role !== 'admin') {
      alert('Accès réservé aux administrateurs');
      router.push('/dashboard');
      return;
    }

    setLoading(false);
  }, [router]);

  if (loading) {
    return <div className="min-h-screen flex justify-center items-center">Vérification des autorisations...</div>;
  }

  return children;
}


===== frontend/src/components/auth/LoginForm.js =====
// frontend/src/components/auth/LoginForm.js
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { login } from '@/services/auth';

export default function LoginForm() {
  const router = useRouter();
  const [formData, setFormData] = useState({
    email: '',
    password: ''
  });
  const [errors, setErrors] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const [apiError, setApiError] = useState('');

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value
    });
    
    // Effacer les erreurs lors de la frappe
    if (errors[name]) {
      setErrors({
        ...errors,
        [name]: ''
      });
    }
  };

  const validateForm = () => {
    const newErrors = {};
    
    if (!formData.email) {
      newErrors.email = "L'email est requis";
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = "Format d'email invalide";
    }
    
    if (!formData.password) {
      newErrors.password = "Le mot de passe est requis";
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Réinitialiser l'erreur API
    setApiError('');
    
    // Validation du formulaire
    if (!validateForm()) return;
    
    setIsLoading(true);
    
    try {
      const result = await login(formData.email, formData.password);
      
      if (result.success) {
        router.push('/dashboard');
      } else {
        setApiError(result.error);
      }
    } catch (error) {
      setApiError('Une erreur s\'est produite lors de la connexion');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <>
      {apiError && (
        <div className="mb-6 p-4 border border-red-200 bg-red-50 rounded-lg text-red-600 text-sm">
          {apiError}
        </div>
      )}
      
      <div className="bg-white p-8 border border-gray-200 rounded-lg shadow-sm">
        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Email
            </label>
            <input
              type="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              className={`w-full px-4 py-2 border ${errors.email ? 'border-red-500' : 'border-gray-300'} rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all`}
              placeholder="vous@exemple.fr"
            />
            {errors.email && (
              <p className="mt-1 text-sm text-red-600">{errors.email}</p>
            )}
          </div>
          
          <div>
            <div className="flex justify-between mb-1">
              <label className="block text-sm font-medium text-gray-700">
                Mot de passe
              </label>
              <Link href="/forgot-password" className="text-sm text-blue-600 hover:text-blue-800">
                Mot de passe oublié?
              </Link>
            </div>
            <input
              type="password"
              name="password"
              value={formData.password}
              onChange={handleChange}
              className={`w-full px-4 py-2 border ${errors.password ? 'border-red-500' : 'border-gray-300'} rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all`}
              placeholder="••••••••"
            />
            {errors.password && (
              <p className="mt-1 text-sm text-red-600">{errors.password}</p>
            )}
          </div>
          
          <button
            type="submit"
            disabled={isLoading}
            className="w-full py-2 px-4 bg-black text-white rounded-md hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-900 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isLoading ? (
              <span className="flex items-center justify-center">
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Connexion en cours...
              </span>
            ) : 'Se connecter'}
          </button>
        </form>
      </div>
      
      <div className="mt-6 text-center">
        <p className="text-gray-600">
          Pas encore de compte?{' '}
          <Link href="/register" className="text-blue-600 hover:text-blue-800">
            S'inscrire
          </Link>
        </p>
      </div>
    </>
  );
}


===== frontend/src/components/auth/RegisterForm.js =====
// src/components/auth/RegisterForm.js
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { register } from '@/services/auth';

export default function RegisterForm() {
  const router = useRouter();
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    confirmPassword: ''
  });
  const [errors, setErrors] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const [apiError, setApiError] = useState('');
  const [success, setSuccess] = useState('');

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value
    });
    
    // Effacer les erreurs lors de la frappe
    if (errors[name]) {
      setErrors({
        ...errors,
        [name]: ''
      });
    }
  };

  const validateForm = () => {
    const newErrors = {};
    
    if (!formData.name) {
      newErrors.name = "Le nom est requis";
    } else if (formData.name.length < 2) {
      newErrors.name = "Le nom doit contenir au moins 2 caractères";
    }
    
    if (!formData.email) {
      newErrors.email = "L'email est requis";
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = "Format d'email invalide";
    }
    
    if (!formData.password) {
      newErrors.password = "Le mot de passe est requis";
    } else if (formData.password.length < 6) {
      newErrors.password = "Le mot de passe doit contenir au moins 6 caractères";
    } else if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/.test(formData.password)) {
      newErrors.password = "Le mot de passe doit contenir au moins une majuscule, une minuscule et un chiffre";
    }
    
    if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = "Les mots de passe ne correspondent pas";
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Réinitialiser les messages
    setApiError('');
    setSuccess('');
    
    // Validation du formulaire
    if (!validateForm()) return;
    
    setIsLoading(true);
    
    try {
      const result = await register({
        name: formData.name,
        email: formData.email,
        password: formData.password,
      });
      
      if (result.success) {
        setSuccess('Compte créé avec succès! Redirection vers la page de connexion...');
        setTimeout(() => {
          router.push('/login');
        }, 2000);
      } else {
        setApiError(result.error);
      }
    } catch (error) {
      setApiError('Une erreur s\'est produite lors de l\'inscription');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <>
      {apiError && (
        <div className="mb-6 p-4 border border-red-200 bg-red-50 rounded-lg text-red-600 text-sm">
          {apiError}
        </div>
      )}
      
      {success && (
        <div className="mb-6 p-4 border border-green-200 bg-green-50 rounded-lg text-green-600 text-sm">
          {success}
        </div>
      )}
      
      <div className="bg-white p-8 border border-gray-200 rounded-lg shadow-sm">
        <form onSubmit={handleSubmit} className="space-y-5">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Nom
            </label>
            <input
              type="text"
              name="name"
              value={formData.name}
              onChange={handleChange}
              className={`w-full px-4 py-2 border ${errors.name ? 'border-red-500' : 'border-gray-300'} rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all`}
              placeholder="Votre nom"
            />
            {errors.name && (
              <p className="mt-1 text-sm text-red-600">{errors.name}</p>
            )}
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Email
            </label>
            <input
              type="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              className={`w-full px-4 py-2 border ${errors.email ? 'border-red-500' : 'border-gray-300'} rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all`}
              placeholder="vous@exemple.fr"
            />
            {errors.email && (
              <p className="mt-1 text-sm text-red-600">{errors.email}</p>
            )}
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Mot de passe
            </label>
            <input
              type="password"
              name="password"
              value={formData.password}
              onChange={handleChange}
              className={`w-full px-4 py-2 border ${errors.password ? 'border-red-500' : 'border-gray-300'} rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all`}
              placeholder="••••••••"
            />
            {errors.password && (
              <p className="mt-1 text-sm text-red-600">{errors.password}</p>
            )}
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Confirmer le mot de passe
            </label>
            <input
              type="password"
              name="confirmPassword"
              value={formData.confirmPassword}
              onChange={handleChange}
              className={`w-full px-4 py-2 border ${errors.confirmPassword ? 'border-red-500' : 'border-gray-300'} rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all`}
              placeholder="••••••••"
            />
            {errors.confirmPassword && (
              <p className="mt-1 text-sm text-red-600">{errors.confirmPassword}</p>
            )}
          </div>
          
          <button
            type="submit"
            disabled={isLoading}
            className="w-full py-2 px-4 bg-black text-white rounded-md hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-900 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isLoading ? (
              <span className="flex items-center justify-center">
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Inscription en cours...
              </span>
            ) : 'S\'inscrire'}
          </button>
        </form>
      </div>
      
      <div className="mt-6 text-center">
        <p className="text-gray-600">
          Déjà un compte?{' '}
          <Link href="/login" className="text-blue-600 hover:text-blue-800">
            Se connecter
          </Link>
        </p>
      </div>
    </>
  );
}


===== frontend/src/components/layout/Layout.js =====
import Header from './Header';

export default function Layout({ children }) {
  return (
    <div className="flex flex-col min-h-screen">
      <Header />
      <main className="flex-grow">{children}</main>
      <footer className="bg-gray-800 text-white py-4 text-center">
        <div className="container mx-auto">
          &copy; {new Date().getFullYear()} SportReserve - Tous droits réservés
        </div>
      </footer>
    </div>
  );
}   


===== frontend/src/components/layout/Header.js =====
'use client';

import Link from 'next/link';
import { useRouter } from 'next/navigation';
import { useState, useEffect } from 'react';
import { isAuthenticated, logout } from '@/services/auth';

export default function Header() {
  const router = useRouter();
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  
  useEffect(() => {
    if (typeof window !== 'undefined') {
      // Vérification initiale
      setIsLoggedIn(isAuthenticated());
      
      // Écouter les changements d'authentification
      const handleAuthChange = () => {
        setIsLoggedIn(isAuthenticated());
      };
      
      window.addEventListener('auth-change', handleAuthChange);
      
      // Pour plus de robustesse, vérifier périodiquement
      const interval = setInterval(() => {
        setIsLoggedIn(isAuthenticated());
      }, 1000);
      
      return () => {
        window.removeEventListener('auth-change', handleAuthChange);
        clearInterval(interval);
      };
    }
  }, []);
  
  const handleLogout = () => {
    logout();
    setIsLoggedIn(false);
    router.push('/login');
  };
  
  return (
    <header className="bg-blue-600 text-white">
      <div className="container mx-auto px-4 py-4 flex justify-between items-center">
        <Link href="/" className="text-xl font-bold">
          SportReserve
        </Link>
        
        <nav className="space-x-4">
          <Link href="/" className="hover:underline">
            Accueil
          </Link>
          <Link href="/fields" className="hover:underline">
            Terrains
          </Link>
          
          {isLoggedIn ? (
            <>
              <Link href="/dashboard" className="hover:underline">
                Dashboard
              </Link>
              <button
                onClick={handleLogout}
                className="hover:underline bg-transparent"
              >
                Déconnexion
              </button>
            </>
          ) : (
            <>
              <Link href="/login" className="hover:underline">
                Connexion
              </Link>
              <Link 
                href="/register" 
                className="bg-white text-blue-600 px-3 py-1 rounded hover:bg-gray-100"
              >
                S'inscrire
              </Link>
            </>
          )}
        </nav>
      </div>
    </header>
  );
}


===== frontend/src/components/fields/FieldFilter.js =====
// src/components/fields/FieldFilter.js
'use client';

import { useState } from 'react';

export default function FieldFilter({ onFilterChange }) {
  const [filters, setFilters] = useState({
    sportType: '',
    priceMax: '',
    searchTerm: ''
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    const newFilters = { ...filters, [name]: value };
    setFilters(newFilters);
    onFilterChange(newFilters);
  };

  const handleReset = () => {
    const resetFilters = {
      sportType: '',
      priceMax: '',
      searchTerm: ''
    };
    setFilters(resetFilters);
    onFilterChange(resetFilters);
  };

  return (
    <div className="bg-white rounded-lg shadow-md p-4 mb-6">
      <h2 className="text-lg font-semibold mb-4">Filtrer les terrains</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Type de sport
          </label>
          <select
            name="sportType"
            value={filters.sportType}
            onChange={handleChange}
            className="w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="">Tous les sports</option>
            <option value="football">Football</option>
            <option value="basketball">Basketball</option>
            <option value="padel">Padel</option>
            <option value="tennis">Tennis</option>
          </select>
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Prix maximum (€/h)
          </label>
          <input
            type="number"
            name="priceMax"
            value={filters.priceMax}
            onChange={handleChange}
            placeholder="Prix max"
            className="w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Recherche
          </label>
          <input
            type="text"
            name="searchTerm"
            value={filters.searchTerm}
            onChange={handleChange}
            placeholder="Nom ou lieu"
            className="w-full p-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
          />
        </div>
      </div>
      
      <div className="mt-4 flex justify-end">
        <button
          onClick={handleReset}
          className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300"
        >
          Réinitialiser
        </button>
      </div>
    </div>
  );
}


===== frontend/src/components/fields/FieldCard.js =====
import Link from 'next/link';

export default function FieldCard({ field }) {
  const fieldId = field._id || field.id;
  
  // URL de l'image avec gestion de l'image par défaut
  const imageUrl = field.image 
    ? `${process.env.NEXT_PUBLIC_API_URL}/uploads/fields/${field.image}`
    : `/images/${field.sportType}-default.jpg`;

  // Styles dynamiques par type de sport
  const sportStyles = {
    football: { bg: 'bg-green-100', text: 'text-green-800', icon: (
      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14 10l-2 1m0 0l-2-1m2 1v2.5M20 7l-2 1m2-1l-2-1m2 1v2.5M14 4l-2-1-2 1M4 7l2-1M4 7l2 1M4 7v2.5M12 21l-2-1m2 1l2-1m-2 1v-2.5M6 18l-2-1v-2.5M18 18l2-1v-2.5" />
      </svg>
    )},
    basketball: { bg: 'bg-orange-100', text: 'text-orange-800', icon: (
      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor">
        <circle cx="12" cy="12" r="10" strokeWidth="1.5"/>
        <path strokeLinecap="round" strokeWidth="1.5" d="M4.93 4.93L19.07 19.07M12 2v20M22 12H2"/>
      </svg>
    )},
    tennis: { bg: 'bg-yellow-100', text: 'text-yellow-800', icon: (
      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor">
        <circle cx="12" cy="12" r="10" strokeWidth="1.5"/>
        <path d="M18 3.5C16 8 16 16 18 20.5M6 3.5C8 8 8 16 6 20.5" strokeWidth="1.5"/>
      </svg>
    )},
    padel: { bg: 'bg-purple-100', text: 'text-purple-800', icon: (
      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor">
        <rect x="5" y="5" width="14" height="14" rx="2" strokeWidth="1.5"/>
        <line x1="5" y1="12" x2="19" y2="12" strokeWidth="1.5"/>
        <line x1="12" y1="5" x2="12" y2="19" strokeWidth="1.5"/>
      </svg>
    )}
  };

  const sportStyle = sportStyles[field.sportType] || { bg: 'bg-blue-100', text: 'text-blue-800' };

  return (
    <div className="bg-white rounded-xl shadow-sm hover:shadow-md transition-shadow overflow-hidden border border-gray-100">
      {/* Image du terrain */}
      <div className="h-48 overflow-hidden">
        <img 
          src={imageUrl} 
          alt={field.name} 
          className="w-full h-full object-cover hover:scale-105 transition-transform"
        />
      </div>

      <div className="p-4">
        <div className="flex justify-between items-start mb-3">
          <h3 className="text-lg font-bold text-gray-800">{field.name}</h3>
          
          {/* Badge du type de sport */}
          <span className={`flex items-center px-3 py-1 rounded-full text-xs font-medium ${sportStyle.bg} ${sportStyle.text}`}>
            {sportStyle.icon && <span className="mr-1">{sportStyle.icon}</span>}
            {field.sportType.charAt(0).toUpperCase() + field.sportType.slice(1)}
          </span>
        </div>

        {/* Informations du terrain */}
        <div className="mb-4">
          <div className="flex items-center text-gray-500 mb-2">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
            <span className="text-sm">{field.location}</span>
          </div>
          
          <div className="flex items-center text-gray-500">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <span className="text-sm">{field.pricePerHour}€/heure</span>
          </div>
        </div>

        {/* Bouton de détails */}
        {fieldId ? (
          <Link href={`/fields/${fieldId}`}>
            <div className="block w-full py-2 px-4 bg-blue-600 hover:bg-blue-700 text-white text-center rounded-md font-medium transition-colors cursor-pointer">
              Voir le terrain
            </div>
          </Link>
        ) : (
          <button
            onClick={() => alert("Impossible d'afficher les détails: ID du terrain manquant")}
            className="block w-full py-2 px-4 bg-gray-400 text-white text-center rounded-md font-medium cursor-not-allowed"
          >
            Non disponible
          </button>
        )}
      </div>
    </div>
  );
}


===== frontend/postcss.config.js =====
module.exports = {
    plugins: {
      tailwindcss: {},
      autoprefixer: {},
    },
  }


===== frontend/.gitignore =====
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts



===== frontend/next.config.mjs =====
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;



===== frontend/jsconfig.json =====
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}



===== frontend/.eslintrc.json =====
{
    "extends": "next/core-web-vitals",
    "rules": {
      "react/no-unescaped-entities": "off"
    }
  }


===== frontend/eslint.config.mjs =====
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals"),
  {
    rules: {
      "react/no-unescaped-entities": "off",
    },
  },
];

export default eslintConfig;


===== frontend/tailwind.config.js =====
/** @type {import('tailwindcss').Config} */
module.exports = {
    content: [
      "./src/**/*.{js,ts,jsx,tsx,mdx}",
    ],
    theme: {
      extend: {},
    },
    plugins: [],
  }


===== frontend/package.json =====
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "axios": "^1.8.2",
    "multer": "^1.4.5-lts.1",
    "next": "15.2.2",
    "next-navigation": "^1.0.6",
    "path": "^0.12.7",
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "autoprefixer": "^10.4.14",
    "eslint": "^9",
    "eslint-config-next": "15.2.2",
    "postcss": "^8.4.23",
    "tailwindcss": "^3.3.0"
  }
}



===== frontend/Dockerfile =====
# Étape de construction
FROM node:18-alpine AS builder

# Définir le répertoire de travail
WORKDIR /app

# Copier les fichiers package.json et package-lock.json
COPY package*.json ./

# Installer les dépendances
RUN npm ci

# Copier les fichiers du projet
COPY . .

# Construire l'application Next.js
RUN npm run build

# Étape de production
FROM node:18-alpine AS runner

WORKDIR /app

# Définir les variables d'environnement
ENV NODE_ENV=production

# Copier les fichiers nécessaires depuis l'étape de construction
COPY --from=builder /app/next.config.mjs ./
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json

# Exposer le port sur lequel Next.js fonctionne
EXPOSE 3000

# Définir la commande de démarrage
CMD ["npm", "start"]


